#------------project configuration start----------------#
openie_llm: &openie_llm
  base_url: https://dashscope.aliyuncs.com/compatible-mode/v1/
  api_key:
  model: qwen2.5-72b-instruct
  type: maas

chat_llm: &chat_llm
  base_url: https://dashscope.aliyuncs.com/compatible-mode/v1/
  api_key:
  model: qwen2.5-72b-instruct
  type: maas

vectorize_model: &vectorize_model
  api_key:
  base_url: https://api.siliconflow.cn/v1/
  model: BAAI/bge-m3
  type: openai
  vector_dimensions: 1024
vectorizer: *vectorize_model

log:
  level: INFO

project:
  biz_scene: default
  host_addr: http://127.0.0.1:8887
  id: '1'
  language: en
  namespace: MuSiQuePike
#------------project configuration end----------------#

#------------kag-builder configuration start----------------#
kag_builder_pipeline:
  chain:
    type: unstructured_builder_chain # kag.builder.default_chain.DefaultUnstructuredBuilderChain
    extractor:
      type: schema_free_extractor # kag.builder.component.extractor.schema_free_extractor.SchemaFreeExtractor
      llm: *openie_llm
      ner_prompt:
        type: default_ner # kag.builder.prompt.default.ner.OpenIENERPrompt
      std_prompt:
        type: default_std # kag.builder.prompt.default.std.OpenIEEntitystandardizationdPrompt
      triple_prompt:
        type: default_triple # kag.builder.prompt.default.triple.OpenIETriplePrompt
    reader:
      type: dict_reader # kag.builder.component.reader.dict_reader.DictReader
    post_processor:
      type: kag_post_processor # kag.builder.component.postprocessor.kag_postprocessor.KAGPostProcessor
    splitter:
      type: length_splitter # kag.builder.component.splitter.length_splitter.LengthSplitter
      split_length: 100000
      window_length: 0
    vectorizer:
      type: batch_vectorizer # kag.builder.component.vectorizer.batch_vectorizer.BatchVectorizer
      vectorize_model: *vectorize_model
    writer:
      type: kg_writer # kag.builder.component.writer.kg_writer.KGWriter
  num_threads_per_chain: 2
  num_chains: 50
  scanner:
    type: musique_dataset_scanner # kag.builder.component.scanner.dataset_scanner.MusiqueCorpusScanner
#------------kag-builder configuration end----------------#

#------------pike atomic question injection start----------------#
kag_atomic_chunk_injection_pipeline:
  chain:
    type: pike_chunk_injection_chain # kag.builder.default_chain.PikeChunkInjectionChain
    decomposer:
      type: atomic_question_chunk_decomposer # kag.builder.component.decomposer.atomic_chunk_question_decomposerr.AtomicQuestionChunkDecomposer
      llm: *openie_llm
      decomposition_prompt:
        type: default_decomposition # kag.builder.prompt.decomposer.pike_decomposition.DecompositionGenerater
    reader:
      type: dict_reader # kag.builder.component.reader.dict_reader.DictReader
    splitter:
      type: length_splitter # kag.builder.component.splitter.length_splitter.LengthSplitter
      split_length: 100000
      window_length: 0
    vectorizer:
      type: batch_vectorizer # kag.builder.component.vectorizer.batch_vectorizer.BatchVectorizer
      vectorize_model: *vectorize_model
    writer:
      type: kg_writer # kag.builder.component.writer.kg_writer.KGWriter
  num_threads_per_chain: 2
  num_chains: 50
  scanner:
    type: musique_dataset_scanner # kag.builder.component.scanner.dataset_scanner.MusiqueCorpusScanner
#------------pike atomic query injection end----------------#

#------------pike atomic question spo injection start----------------#
graph_api_for_decomposer: &graph_api_for_decomposer
  type: openspg_graph_api

kag_pike_kb_injection_pipeline:
  chain:
    type: pike_kb_injection_chain # kag.builder.default_chain.PikeKBInjectionChain
    decomposer:
      type: atomic_question_kb_decomposer # kag.builder.component.decomposer.atomic_chunk_question_decomposerr.AtomicQuestionChunkDecomposer
      llm: *openie_llm
      graph_api: *graph_api_for_decomposer
      decomposition_prompt:
        type: default_decomposition # kag.builder.prompt.decomposer.pike_decomposition.DecompositionGenerater
      ner_prompt:
        type: default_ner # kag.builder.prompt.default.ner.OpenIENERPrompt
      std_prompt:
        type: default_std # kag.builder.prompt.default.std.OpenIEEntitystandardizationdPrompt
      triple_prompt:
        type: default_triple # kag.builder.prompt.default.triple.OpenIETriplePrompt
    reader:
      type: dict_reader # kag.builder.component.reader.dict_reader.DictReader
    splitter:
      type: length_splitter # kag.builder.component.splitter.length_splitter.LengthSplitter
      split_length: 100000
      window_length: 0
    vectorizer:
      type: batch_vectorizer # kag.builder.component.vectorizer.batch_vectorizer.BatchVectorizer
      vectorize_model: *vectorize_model
    writer:
      type: kg_writer # kag.builder.component.writer.kg_writer.KGWriter
  num_threads_per_chain: 2
  num_chains: 50
  scanner:
    type: musique_dataset_scanner # kag.builder.component.scanner.dataset_scanner.MusiqueCorpusScanner
#------------pike atomic query injection end----------------#

#------------kag-solver configuration start----------------#
search_api: &search_api
  type: openspg_search_api #kag.solver.tools.search_api.impl.openspg_search_api.OpenSPGSearchAPI

graph_api: &graph_api
  type: openspg_graph_api #kag.solver.tools.graph_api.impl.openspg_graph_api.OpenSPGGraphApi

exact_kg_retriever: &exact_kg_retriever
  type: default_exact_kg_retriever # kag.solver.retriever.impl.default_exact_kg_retriever.DefaultExactKgRetriever
  el_num: 5
  llm_client: *chat_llm
  search_api: *search_api
  graph_api: *graph_api

fuzzy_kg_retriever: &fuzzy_kg_retriever
  type: default_fuzzy_kg_retriever # kag.solver.retriever.impl.default_fuzzy_kg_retriever.DefaultFuzzyKgRetriever
  el_num: 5
  vectorize_model: *vectorize_model
  llm_client: *chat_llm
  search_api: *search_api
  graph_api: *graph_api

chunk_retriever: &chunk_retriever
  type: default_chunk_retriever # kag.solver.retriever.impl.default_fuzzy_kg_retriever.DefaultFuzzyKgRetriever
  llm_client: *chat_llm
  recall_num: 10
  rerank_topk: 10

atomic_question_retriever: &atomic_question_retriever
  type: default_atomic_question_chunk_retriever # kag.solver.retriever.impl.default_atomic_question_retriever.DefaultAtomicQueryRetriever
  llm_client: *chat_llm
  recall_num: 8
  rerank_topk: 10
  match_threshold: 0.5

atomic_query_executor: &atomic_query_executor
  type: lf_with_atomic_question_executor # kag.solver.execute.default_lf_executor.LFWithAtomicQuestionExecutor
  llm_client: *chat_llm
  force_chunk_retriever: true
  exact_kg_retriever: *exact_kg_retriever
  fuzzy_kg_retriever: *fuzzy_kg_retriever
  chunk_retriever: *chunk_retriever
  atomic_question_retriever: *atomic_question_retriever
  merger:
    type: default_lf_sub_query_res_merger # kag.solver.execute.default_sub_query_merger.DefaultLFSubQueryResMerger
    vectorize_model: *vectorize_model
    chunk_retriever: *chunk_retriever
  atomic_query_decomposition_prompt:
    type: atomic_query_decomposition_prompt
  atomic_question_selection_prompt:
    type: atomic_question_selection_prompt
  max_iterations: 5

kag_solver_pipeline:
  memory:
    type: default_memory # kag.solver.implementation.default_memory.DefaultMemory
    llm_client: *chat_llm
  max_iterations: 3
  reasoner:
    type: default_reasoner # kag.solver.implementation.default_reasoner.DefaultReasoner
    llm_client: *chat_llm
    lf_planner:
      type: default_lf_planner # kag.solver.plan.default_lf_planner.DefaultLFPlanner
      llm_client: *chat_llm
      vectorize_model: *vectorize_model
    lf_executor: *atomic_query_executor
  generator:
    type: default_generator # kag.solver.implementation.default_generator.DefaultGenerator
    llm_client: *chat_llm
    generate_prompt:
      type: resp_simple # kag/examples/musique/solver/prompt/resp_generator.py
  reflector:
    type: default_reflector # kag.solver.implementation.default_reflector.DefaultReflector
    llm_client: *chat_llm

#------------kag-solver configuration end----------------#
