# Generated from Cypher.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,127,1575,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,3,0,208,
        8,0,1,0,1,0,3,0,212,8,0,1,0,3,0,215,8,0,1,0,3,0,218,8,0,1,0,1,0,
        1,1,1,1,1,2,1,2,3,2,226,8,2,1,3,1,3,3,3,230,8,3,1,3,5,3,233,8,3,
        10,3,12,3,236,9,3,1,4,1,4,1,4,1,4,3,4,242,8,4,1,4,1,4,1,4,3,4,247,
        8,4,1,4,3,4,250,8,4,1,5,1,5,3,5,254,8,5,1,6,1,6,3,6,258,8,6,5,6,
        260,8,6,10,6,12,6,263,9,6,1,6,1,6,1,6,3,6,268,8,6,5,6,270,8,6,10,
        6,12,6,273,9,6,1,6,1,6,3,6,277,8,6,1,6,5,6,280,8,6,10,6,12,6,283,
        9,6,1,6,3,6,286,8,6,1,6,3,6,289,8,6,3,6,291,8,6,1,7,1,7,3,7,295,
        8,7,5,7,297,8,7,10,7,12,7,300,9,7,1,7,1,7,3,7,304,8,7,5,7,306,8,
        7,10,7,12,7,309,9,7,1,7,1,7,3,7,313,8,7,4,7,315,8,7,11,7,12,7,316,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,326,8,8,1,9,1,9,1,9,3,9,331,8,9,
        1,10,1,10,3,10,335,8,10,1,10,1,10,3,10,339,8,10,1,10,1,10,3,10,343,
        8,10,1,10,3,10,346,8,10,1,11,1,11,3,11,350,8,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,3,12,360,8,12,1,12,1,12,1,12,5,12,365,8,12,
        10,12,12,12,368,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,380,8,13,1,14,1,14,3,14,384,8,14,1,14,1,14,1,15,1,15,3,
        15,390,8,15,1,15,1,15,3,15,394,8,15,1,15,1,15,3,15,398,8,15,1,15,
        5,15,401,8,15,10,15,12,15,404,9,15,1,16,1,16,3,16,408,8,16,1,16,
        1,16,3,16,412,8,16,1,16,1,16,1,16,1,16,3,16,418,8,16,1,16,1,16,3,
        16,422,8,16,1,16,1,16,1,16,1,16,3,16,428,8,16,1,16,1,16,3,16,432,
        8,16,1,16,1,16,1,16,1,16,3,16,438,8,16,1,16,1,16,3,16,442,8,16,1,
        17,1,17,3,17,446,8,17,1,17,1,17,3,17,450,8,17,1,17,1,17,3,17,454,
        8,17,1,17,1,17,3,17,458,8,17,1,17,5,17,461,8,17,10,17,12,17,464,
        9,17,1,18,1,18,1,18,1,18,3,18,470,8,18,1,18,1,18,3,18,474,8,18,1,
        18,5,18,477,8,18,10,18,12,18,480,9,18,1,19,1,19,1,19,1,19,3,19,486,
        8,19,1,20,1,20,1,20,1,20,3,20,492,8,20,1,20,1,20,1,20,3,20,497,8,
        20,1,21,1,21,1,21,1,21,3,21,503,8,21,1,21,3,21,506,8,21,1,21,1,21,
        1,21,1,21,3,21,512,8,21,3,21,514,8,21,1,22,1,22,3,22,518,8,22,1,
        22,1,22,3,22,522,8,22,1,22,5,22,525,8,22,10,22,12,22,528,9,22,1,
        22,3,22,531,8,22,1,22,3,22,534,8,22,1,23,1,23,1,23,1,23,1,23,3,23,
        541,8,23,1,23,1,23,1,24,1,24,1,24,3,24,548,8,24,1,24,3,24,551,8,
        24,1,25,1,25,1,25,1,26,3,26,557,8,26,1,26,3,26,560,8,26,1,26,1,26,
        1,26,1,26,3,26,566,8,26,1,26,1,26,3,26,570,8,26,1,26,1,26,3,26,574,
        8,26,1,27,1,27,3,27,578,8,27,1,27,1,27,3,27,582,8,27,1,27,5,27,585,
        8,27,10,27,12,27,588,9,27,1,27,1,27,3,27,592,8,27,1,27,1,27,3,27,
        596,8,27,1,27,5,27,599,8,27,10,27,12,27,602,9,27,3,27,604,8,27,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,613,8,28,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,3,29,622,8,29,1,29,5,29,625,8,29,10,29,12,29,628,
        9,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,640,
        8,32,1,32,3,32,643,8,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,651,8,
        34,1,34,1,34,3,34,655,8,34,1,34,5,34,658,8,34,10,34,12,34,661,9,
        34,1,35,1,35,3,35,665,8,35,1,35,1,35,3,35,669,8,35,1,35,1,35,1,35,
        3,35,674,8,35,1,36,1,36,1,37,1,37,3,37,680,8,37,1,37,5,37,683,8,
        37,10,37,12,37,686,9,37,1,37,1,37,1,37,1,37,3,37,692,8,37,1,38,1,
        38,3,38,696,8,38,1,38,4,38,699,8,38,11,38,12,38,700,1,39,1,39,3,
        39,705,8,39,1,39,1,39,3,39,709,8,39,3,39,711,8,39,1,39,1,39,3,39,
        715,8,39,3,39,717,8,39,1,39,1,39,3,39,721,8,39,3,39,723,8,39,1,39,
        1,39,1,40,1,40,3,40,729,8,40,1,40,1,40,1,41,1,41,3,41,735,8,41,1,
        41,1,41,3,41,739,8,41,1,41,3,41,742,8,41,1,41,3,41,745,8,41,1,41,
        1,41,3,41,749,8,41,1,41,1,41,1,41,1,41,3,41,755,8,41,1,41,1,41,3,
        41,759,8,41,1,41,3,41,762,8,41,1,41,3,41,765,8,41,1,41,1,41,1,41,
        1,41,3,41,771,8,41,1,41,3,41,774,8,41,1,41,3,41,777,8,41,1,41,1,
        41,3,41,781,8,41,1,41,1,41,1,41,1,41,3,41,787,8,41,1,41,3,41,790,
        8,41,1,41,3,41,793,8,41,1,41,1,41,3,41,797,8,41,1,42,1,42,3,42,801,
        8,42,1,42,1,42,3,42,805,8,42,3,42,807,8,42,1,42,1,42,3,42,811,8,
        42,3,42,813,8,42,1,42,3,42,816,8,42,1,42,1,42,3,42,820,8,42,3,42,
        822,8,42,1,42,1,42,1,43,1,43,3,43,828,8,43,1,44,1,44,3,44,832,8,
        44,1,44,1,44,3,44,836,8,44,1,44,1,44,3,44,840,8,44,1,44,3,44,843,
        8,44,1,44,5,44,846,8,44,10,44,12,44,849,9,44,1,45,1,45,3,45,853,
        8,45,1,45,5,45,856,8,45,10,45,12,45,859,9,45,1,46,1,46,3,46,863,
        8,46,1,46,1,46,1,47,1,47,3,47,869,8,47,1,47,1,47,3,47,873,8,47,3,
        47,875,8,47,1,47,1,47,3,47,879,8,47,1,47,1,47,3,47,883,8,47,3,47,
        885,8,47,3,47,887,8,47,1,48,1,48,1,49,1,49,1,50,1,50,3,50,895,8,
        50,1,50,4,50,898,8,50,11,50,12,50,899,1,51,1,51,1,52,1,52,1,52,1,
        52,1,52,5,52,909,8,52,10,52,12,52,912,9,52,1,53,1,53,1,53,1,53,1,
        53,5,53,919,8,53,10,53,12,53,922,9,53,1,54,1,54,1,54,1,54,1,54,5,
        54,929,8,54,10,54,12,54,932,9,54,1,55,1,55,3,55,936,8,55,5,55,938,
        8,55,10,55,12,55,941,9,55,1,55,1,55,1,56,1,56,3,56,947,8,56,1,56,
        5,56,950,8,56,10,56,12,56,953,9,56,1,57,1,57,3,57,957,8,57,1,57,
        1,57,1,57,3,57,962,8,57,1,57,1,57,1,57,3,57,967,8,57,1,57,1,57,1,
        57,3,57,972,8,57,1,57,1,57,1,57,3,57,977,8,57,1,57,1,57,1,57,3,57,
        982,8,57,1,57,3,57,985,8,57,1,58,1,58,1,58,1,58,5,58,991,8,58,10,
        58,12,58,994,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,3,59,1006,8,59,1,59,3,59,1009,8,59,1,59,1,59,1,60,1,60,1,60,3,
        60,1016,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,3,61,1030,8,61,1,62,1,62,3,62,1034,8,62,1,62,1,62,3,62,1038,
        8,62,1,62,1,62,3,62,1042,8,62,1,62,1,62,3,62,1046,8,62,1,62,5,62,
        1049,8,62,10,62,12,62,1052,9,62,1,63,1,63,3,63,1056,8,63,1,63,1,
        63,3,63,1060,8,63,1,63,1,63,3,63,1064,8,63,1,63,1,63,3,63,1068,8,
        63,1,63,1,63,3,63,1072,8,63,1,63,1,63,3,63,1076,8,63,1,63,5,63,1079,
        8,63,10,63,12,63,1082,9,63,1,64,1,64,3,64,1086,8,64,1,64,1,64,3,
        64,1090,8,64,1,64,5,64,1093,8,64,10,64,12,64,1096,9,64,1,65,1,65,
        1,65,3,65,1101,8,65,1,65,3,65,1104,8,65,1,66,1,66,3,66,1108,8,66,
        1,66,1,66,3,66,1112,8,66,1,66,5,66,1115,8,66,10,66,12,66,1118,9,
        66,1,66,3,66,1121,8,66,1,66,3,66,1124,8,66,1,67,1,67,1,67,1,67,1,
        67,1,67,3,67,1132,8,67,1,67,1,67,3,67,1136,8,67,1,67,3,67,1139,8,
        67,1,68,1,68,3,68,1143,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,
        69,1152,8,69,1,69,1,69,3,69,1156,8,69,1,69,1,69,3,69,1160,8,69,1,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1171,8,69,1,70,1,
        70,3,70,1175,8,70,1,70,4,70,1178,8,70,11,70,12,70,1179,1,70,1,70,
        3,70,1184,8,70,1,70,1,70,3,70,1188,8,70,1,70,4,70,1191,8,70,11,70,
        12,70,1192,3,70,1195,8,70,1,70,3,70,1198,8,70,1,70,1,70,3,70,1202,
        8,70,1,70,3,70,1205,8,70,1,70,3,70,1208,8,70,1,70,1,70,1,71,1,71,
        3,71,1214,8,71,1,71,1,71,3,71,1218,8,71,1,71,1,71,3,71,1222,8,71,
        1,71,1,71,1,72,1,72,3,72,1228,8,72,1,72,1,72,3,72,1232,8,72,1,72,
        1,72,3,72,1236,8,72,1,72,3,72,1239,8,72,1,72,3,72,1242,8,72,1,72,
        1,72,1,73,1,73,3,73,1248,8,73,1,73,1,73,3,73,1252,8,73,1,73,1,73,
        3,73,1256,8,73,3,73,1258,8,73,1,73,1,73,3,73,1262,8,73,1,73,1,73,
        3,73,1266,8,73,3,73,1268,8,73,1,73,1,73,3,73,1272,8,73,1,73,1,73,
        3,73,1276,8,73,1,73,1,73,1,74,1,74,3,74,1282,8,74,1,74,1,74,3,74,
        1286,8,74,1,74,1,74,3,74,1290,8,74,1,74,1,74,1,74,1,74,3,74,1296,
        8,74,1,74,1,74,3,74,1300,8,74,1,74,1,74,3,74,1304,8,74,1,74,1,74,
        1,74,1,74,3,74,1310,8,74,1,74,1,74,3,74,1314,8,74,1,74,1,74,3,74,
        1318,8,74,1,74,1,74,1,74,1,74,3,74,1324,8,74,1,74,1,74,3,74,1328,
        8,74,1,74,1,74,3,74,1332,8,74,1,74,1,74,3,74,1336,8,74,1,75,1,75,
        3,75,1340,8,75,1,75,3,75,1343,8,75,1,76,1,76,1,77,1,77,3,77,1349,
        8,77,1,77,1,77,3,77,1353,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,
        1,78,1,79,1,79,3,79,1365,8,79,1,79,1,79,3,79,1369,8,79,1,79,1,79,
        3,79,1373,8,79,3,79,1375,8,79,1,79,1,79,3,79,1379,8,79,1,79,1,79,
        3,79,1383,8,79,1,79,1,79,3,79,1387,8,79,5,79,1389,8,79,10,79,12,
        79,1392,9,79,3,79,1394,8,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,3,
        81,1403,8,81,1,81,1,81,3,81,1407,8,81,1,81,1,81,1,81,3,81,1412,8,
        81,1,81,3,81,1415,8,81,3,81,1417,8,81,1,81,3,81,1420,8,81,1,81,1,
        81,1,82,1,82,3,82,1426,8,82,1,82,1,82,3,82,1430,8,82,1,82,1,82,3,
        82,1434,8,82,1,82,1,82,3,82,1438,8,82,1,82,1,82,3,82,1442,8,82,5,
        82,1444,8,82,10,82,12,82,1447,9,82,3,82,1449,8,82,1,82,1,82,1,83,
        1,83,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,5,86,1463,8,86,10,86,
        12,86,1466,9,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1476,
        8,88,1,89,1,89,1,90,1,90,3,90,1482,8,90,1,91,1,91,1,92,1,92,1,93,
        1,93,3,93,1490,8,93,1,93,1,93,3,93,1494,8,93,1,93,1,93,3,93,1498,
        8,93,1,93,1,93,3,93,1502,8,93,5,93,1504,8,93,10,93,12,93,1507,9,
        93,3,93,1509,8,93,1,93,1,93,1,94,1,94,3,94,1515,8,94,1,94,1,94,3,
        94,1519,8,94,1,94,1,94,3,94,1523,8,94,1,94,1,94,3,94,1527,8,94,1,
        94,1,94,3,94,1531,8,94,1,94,1,94,3,94,1535,8,94,1,94,1,94,3,94,1539,
        8,94,1,94,1,94,3,94,1543,8,94,5,94,1545,8,94,10,94,12,94,1548,9,
        94,3,94,1550,8,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,3,96,1559,8,
        96,1,97,1,97,3,97,1563,8,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,
        1,101,1,102,1,102,1,102,0,0,103,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        0,10,1,0,68,71,1,0,18,19,1,0,93,94,1,0,95,97,1,0,105,106,5,0,46,
        58,61,82,84,88,92,94,109,118,5,0,83,83,89,91,98,98,119,121,124,124,
        2,0,14,14,27,30,2,0,15,15,31,34,2,0,19,19,35,45,1793,0,207,1,0,0,
        0,2,221,1,0,0,0,4,225,1,0,0,0,6,227,1,0,0,0,8,249,1,0,0,0,10,253,
        1,0,0,0,12,290,1,0,0,0,14,314,1,0,0,0,16,325,1,0,0,0,18,330,1,0,
        0,0,20,334,1,0,0,0,22,347,1,0,0,0,24,357,1,0,0,0,26,379,1,0,0,0,
        28,381,1,0,0,0,30,387,1,0,0,0,32,441,1,0,0,0,34,445,1,0,0,0,36,465,
        1,0,0,0,38,485,1,0,0,0,40,487,1,0,0,0,42,498,1,0,0,0,44,515,1,0,
        0,0,46,540,1,0,0,0,48,544,1,0,0,0,50,552,1,0,0,0,52,559,1,0,0,0,
        54,603,1,0,0,0,56,612,1,0,0,0,58,614,1,0,0,0,60,629,1,0,0,0,62,633,
        1,0,0,0,64,637,1,0,0,0,66,644,1,0,0,0,68,648,1,0,0,0,70,673,1,0,
        0,0,72,675,1,0,0,0,74,691,1,0,0,0,76,693,1,0,0,0,78,702,1,0,0,0,
        80,726,1,0,0,0,82,796,1,0,0,0,84,798,1,0,0,0,86,827,1,0,0,0,88,829,
        1,0,0,0,90,850,1,0,0,0,92,860,1,0,0,0,94,866,1,0,0,0,96,888,1,0,
        0,0,98,890,1,0,0,0,100,892,1,0,0,0,102,901,1,0,0,0,104,903,1,0,0,
        0,106,913,1,0,0,0,108,923,1,0,0,0,110,939,1,0,0,0,112,944,1,0,0,
        0,114,984,1,0,0,0,116,986,1,0,0,0,118,1005,1,0,0,0,120,1012,1,0,
        0,0,122,1029,1,0,0,0,124,1031,1,0,0,0,126,1053,1,0,0,0,128,1083,
        1,0,0,0,130,1103,1,0,0,0,132,1105,1,0,0,0,134,1138,1,0,0,0,136,1140,
        1,0,0,0,138,1170,1,0,0,0,140,1194,1,0,0,0,142,1211,1,0,0,0,144,1225,
        1,0,0,0,146,1245,1,0,0,0,148,1335,1,0,0,0,150,1337,1,0,0,0,152,1344,
        1,0,0,0,154,1346,1,0,0,0,156,1356,1,0,0,0,158,1362,1,0,0,0,160,1397,
        1,0,0,0,162,1400,1,0,0,0,164,1423,1,0,0,0,166,1452,1,0,0,0,168,1454,
        1,0,0,0,170,1456,1,0,0,0,172,1464,1,0,0,0,174,1467,1,0,0,0,176,1475,
        1,0,0,0,178,1477,1,0,0,0,180,1481,1,0,0,0,182,1483,1,0,0,0,184,1485,
        1,0,0,0,186,1487,1,0,0,0,188,1512,1,0,0,0,190,1553,1,0,0,0,192,1555,
        1,0,0,0,194,1562,1,0,0,0,196,1564,1,0,0,0,198,1566,1,0,0,0,200,1568,
        1,0,0,0,202,1570,1,0,0,0,204,1572,1,0,0,0,206,208,5,125,0,0,207,
        206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,214,3,2,1,0,210,
        212,5,125,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,
        215,5,1,0,0,214,211,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,
        218,5,125,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,
        220,5,0,0,1,220,1,1,0,0,0,221,222,3,4,2,0,222,3,1,0,0,0,223,226,
        3,6,3,0,224,226,3,42,21,0,225,223,1,0,0,0,225,224,1,0,0,0,226,5,
        1,0,0,0,227,234,3,10,5,0,228,230,5,125,0,0,229,228,1,0,0,0,229,230,
        1,0,0,0,230,231,1,0,0,0,231,233,3,8,4,0,232,229,1,0,0,0,233,236,
        1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,7,1,0,0,0,236,234,1,
        0,0,0,237,238,5,46,0,0,238,239,5,125,0,0,239,241,5,47,0,0,240,242,
        5,125,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,250,
        3,10,5,0,244,246,5,46,0,0,245,247,5,125,0,0,246,245,1,0,0,0,246,
        247,1,0,0,0,247,248,1,0,0,0,248,250,3,10,5,0,249,237,1,0,0,0,249,
        244,1,0,0,0,250,9,1,0,0,0,251,254,3,12,6,0,252,254,3,14,7,0,253,
        251,1,0,0,0,253,252,1,0,0,0,254,11,1,0,0,0,255,257,3,18,9,0,256,
        258,5,125,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,
        255,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,
        264,1,0,0,0,263,261,1,0,0,0,264,291,3,50,25,0,265,267,3,18,9,0,266,
        268,5,125,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,
        265,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,
        274,1,0,0,0,273,271,1,0,0,0,274,281,3,16,8,0,275,277,5,125,0,0,276,
        275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,280,3,16,8,0,279,
        276,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        288,1,0,0,0,283,281,1,0,0,0,284,286,5,125,0,0,285,284,1,0,0,0,285,
        286,1,0,0,0,286,287,1,0,0,0,287,289,3,50,25,0,288,285,1,0,0,0,288,
        289,1,0,0,0,289,291,1,0,0,0,290,261,1,0,0,0,290,271,1,0,0,0,291,
        13,1,0,0,0,292,294,3,18,9,0,293,295,5,125,0,0,294,293,1,0,0,0,294,
        295,1,0,0,0,295,297,1,0,0,0,296,292,1,0,0,0,297,300,1,0,0,0,298,
        296,1,0,0,0,298,299,1,0,0,0,299,307,1,0,0,0,300,298,1,0,0,0,301,
        303,3,16,8,0,302,304,5,125,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,
        306,1,0,0,0,305,301,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,
        308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,312,3,48,24,0,311,
        313,5,125,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,
        298,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,
        318,1,0,0,0,318,319,3,12,6,0,319,15,1,0,0,0,320,326,3,28,14,0,321,
        326,3,24,12,0,322,326,3,34,17,0,323,326,3,30,15,0,324,326,3,36,18,
        0,325,320,1,0,0,0,325,321,1,0,0,0,325,322,1,0,0,0,325,323,1,0,0,
        0,325,324,1,0,0,0,326,17,1,0,0,0,327,331,3,20,10,0,328,331,3,22,
        11,0,329,331,3,40,20,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,
        0,0,0,331,19,1,0,0,0,332,333,5,48,0,0,333,335,5,125,0,0,334,332,
        1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,338,5,49,0,0,337,339,
        5,125,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,345,
        3,68,34,0,341,343,5,125,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,
        344,1,0,0,0,344,346,3,66,33,0,345,342,1,0,0,0,345,346,1,0,0,0,346,
        21,1,0,0,0,347,349,5,50,0,0,348,350,5,125,0,0,349,348,1,0,0,0,349,
        350,1,0,0,0,350,351,1,0,0,0,351,352,3,102,51,0,352,353,5,125,0,0,
        353,354,5,51,0,0,354,355,5,125,0,0,355,356,3,174,87,0,356,23,1,0,
        0,0,357,359,5,52,0,0,358,360,5,125,0,0,359,358,1,0,0,0,359,360,1,
        0,0,0,360,361,1,0,0,0,361,366,3,70,35,0,362,363,5,125,0,0,363,365,
        3,26,13,0,364,362,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,
        1,0,0,0,367,25,1,0,0,0,368,366,1,0,0,0,369,370,5,53,0,0,370,371,
        5,125,0,0,371,372,5,49,0,0,372,373,5,125,0,0,373,380,3,30,15,0,374,
        375,5,53,0,0,375,376,5,125,0,0,376,377,5,54,0,0,377,378,5,125,0,
        0,378,380,3,30,15,0,379,369,1,0,0,0,379,374,1,0,0,0,380,27,1,0,0,
        0,381,383,5,54,0,0,382,384,5,125,0,0,383,382,1,0,0,0,383,384,1,0,
        0,0,384,385,1,0,0,0,385,386,3,68,34,0,386,29,1,0,0,0,387,389,5,55,
        0,0,388,390,5,125,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,
        0,0,0,391,402,3,32,16,0,392,394,5,125,0,0,393,392,1,0,0,0,393,394,
        1,0,0,0,394,395,1,0,0,0,395,397,5,2,0,0,396,398,5,125,0,0,397,396,
        1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,401,3,32,16,0,400,393,
        1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,31,1,
        0,0,0,404,402,1,0,0,0,405,407,3,100,50,0,406,408,5,125,0,0,407,406,
        1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,411,5,3,0,0,410,412,
        5,125,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,
        3,102,51,0,414,442,1,0,0,0,415,417,3,174,87,0,416,418,5,125,0,0,
        417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,5,3,0,0,
        420,422,5,125,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,
        0,423,424,3,102,51,0,424,442,1,0,0,0,425,427,3,174,87,0,426,428,
        5,125,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,
        5,4,0,0,430,432,5,125,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,
        1,0,0,0,433,434,3,102,51,0,434,442,1,0,0,0,435,437,3,174,87,0,436,
        438,5,125,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
        440,3,90,45,0,440,442,1,0,0,0,441,405,1,0,0,0,441,415,1,0,0,0,441,
        425,1,0,0,0,441,435,1,0,0,0,442,33,1,0,0,0,443,444,5,56,0,0,444,
        446,5,125,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,
        449,5,57,0,0,448,450,5,125,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
        451,1,0,0,0,451,462,3,102,51,0,452,454,5,125,0,0,453,452,1,0,0,0,
        453,454,1,0,0,0,454,455,1,0,0,0,455,457,5,2,0,0,456,458,5,125,0,
        0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,461,3,102,
        51,0,460,453,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,
        0,0,463,35,1,0,0,0,464,462,1,0,0,0,465,466,5,58,0,0,466,467,5,125,
        0,0,467,478,3,38,19,0,468,470,5,125,0,0,469,468,1,0,0,0,469,470,
        1,0,0,0,470,471,1,0,0,0,471,473,5,2,0,0,472,474,5,125,0,0,473,472,
        1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,477,3,38,19,0,476,469,
        1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,37,1,
        0,0,0,480,478,1,0,0,0,481,482,3,174,87,0,482,483,3,90,45,0,483,486,
        1,0,0,0,484,486,3,100,50,0,485,481,1,0,0,0,485,484,1,0,0,0,486,39,
        1,0,0,0,487,488,5,59,0,0,488,489,5,125,0,0,489,496,3,164,82,0,490,
        492,5,125,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,
        494,5,60,0,0,494,495,5,125,0,0,495,497,3,44,22,0,496,491,1,0,0,0,
        496,497,1,0,0,0,497,41,1,0,0,0,498,499,5,59,0,0,499,502,5,125,0,
        0,500,503,3,164,82,0,501,503,3,166,83,0,502,500,1,0,0,0,502,501,
        1,0,0,0,503,513,1,0,0,0,504,506,5,125,0,0,505,504,1,0,0,0,505,506,
        1,0,0,0,506,507,1,0,0,0,507,508,5,60,0,0,508,511,5,125,0,0,509,512,
        5,5,0,0,510,512,3,44,22,0,511,509,1,0,0,0,511,510,1,0,0,0,512,514,
        1,0,0,0,513,505,1,0,0,0,513,514,1,0,0,0,514,43,1,0,0,0,515,526,3,
        46,23,0,516,518,5,125,0,0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,
        1,0,0,0,519,521,5,2,0,0,520,522,5,125,0,0,521,520,1,0,0,0,521,522,
        1,0,0,0,522,523,1,0,0,0,523,525,3,46,23,0,524,517,1,0,0,0,525,528,
        1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,533,1,0,0,0,528,526,
        1,0,0,0,529,531,5,125,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,
        1,0,0,0,532,534,3,66,33,0,533,530,1,0,0,0,533,534,1,0,0,0,534,45,
        1,0,0,0,535,536,3,168,84,0,536,537,5,125,0,0,537,538,5,51,0,0,538,
        539,5,125,0,0,539,541,1,0,0,0,540,535,1,0,0,0,540,541,1,0,0,0,541,
        542,1,0,0,0,542,543,3,174,87,0,543,47,1,0,0,0,544,545,5,61,0,0,545,
        550,3,52,26,0,546,548,5,125,0,0,547,546,1,0,0,0,547,548,1,0,0,0,
        548,549,1,0,0,0,549,551,3,66,33,0,550,547,1,0,0,0,550,551,1,0,0,
        0,551,49,1,0,0,0,552,553,5,62,0,0,553,554,3,52,26,0,554,51,1,0,0,
        0,555,557,5,125,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,
        0,0,558,560,5,63,0,0,559,556,1,0,0,0,559,560,1,0,0,0,560,561,1,0,
        0,0,561,562,5,125,0,0,562,565,3,54,27,0,563,564,5,125,0,0,564,566,
        3,58,29,0,565,563,1,0,0,0,565,566,1,0,0,0,566,569,1,0,0,0,567,568,
        5,125,0,0,568,570,3,60,30,0,569,567,1,0,0,0,569,570,1,0,0,0,570,
        573,1,0,0,0,571,572,5,125,0,0,572,574,3,62,31,0,573,571,1,0,0,0,
        573,574,1,0,0,0,574,53,1,0,0,0,575,586,5,5,0,0,576,578,5,125,0,0,
        577,576,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,581,5,2,0,0,
        580,582,5,125,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,
        0,583,585,3,56,28,0,584,577,1,0,0,0,585,588,1,0,0,0,586,584,1,0,
        0,0,586,587,1,0,0,0,587,604,1,0,0,0,588,586,1,0,0,0,589,600,3,56,
        28,0,590,592,5,125,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,
        0,0,0,593,595,5,2,0,0,594,596,5,125,0,0,595,594,1,0,0,0,595,596,
        1,0,0,0,596,597,1,0,0,0,597,599,3,56,28,0,598,591,1,0,0,0,599,602,
        1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,604,1,0,0,0,602,600,
        1,0,0,0,603,575,1,0,0,0,603,589,1,0,0,0,604,55,1,0,0,0,605,606,3,
        102,51,0,606,607,5,125,0,0,607,608,5,51,0,0,608,609,5,125,0,0,609,
        610,3,174,87,0,610,613,1,0,0,0,611,613,3,102,51,0,612,605,1,0,0,
        0,612,611,1,0,0,0,613,57,1,0,0,0,614,615,5,64,0,0,615,616,5,125,
        0,0,616,617,5,65,0,0,617,618,5,125,0,0,618,626,3,64,32,0,619,621,
        5,2,0,0,620,622,5,125,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,
        1,0,0,0,623,625,3,64,32,0,624,619,1,0,0,0,625,628,1,0,0,0,626,624,
        1,0,0,0,626,627,1,0,0,0,627,59,1,0,0,0,628,626,1,0,0,0,629,630,5,
        66,0,0,630,631,5,125,0,0,631,632,3,102,51,0,632,61,1,0,0,0,633,634,
        5,67,0,0,634,635,5,125,0,0,635,636,3,102,51,0,636,63,1,0,0,0,637,
        642,3,102,51,0,638,640,5,125,0,0,639,638,1,0,0,0,639,640,1,0,0,0,
        640,641,1,0,0,0,641,643,7,0,0,0,642,639,1,0,0,0,642,643,1,0,0,0,
        643,65,1,0,0,0,644,645,5,72,0,0,645,646,5,125,0,0,646,647,3,102,
        51,0,647,67,1,0,0,0,648,659,3,70,35,0,649,651,5,125,0,0,650,649,
        1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,5,2,0,0,653,655,
        5,125,0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,658,
        3,70,35,0,657,650,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,
        1,0,0,0,660,69,1,0,0,0,661,659,1,0,0,0,662,664,3,174,87,0,663,665,
        5,125,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,668,
        5,3,0,0,667,669,5,125,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,
        1,0,0,0,670,671,3,72,36,0,671,674,1,0,0,0,672,674,3,72,36,0,673,
        662,1,0,0,0,673,672,1,0,0,0,674,71,1,0,0,0,675,676,3,74,37,0,676,
        73,1,0,0,0,677,684,3,78,39,0,678,680,5,125,0,0,679,678,1,0,0,0,679,
        680,1,0,0,0,680,681,1,0,0,0,681,683,3,80,40,0,682,679,1,0,0,0,683,
        686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,692,1,0,0,0,686,
        684,1,0,0,0,687,688,5,6,0,0,688,689,3,74,37,0,689,690,5,7,0,0,690,
        692,1,0,0,0,691,677,1,0,0,0,691,687,1,0,0,0,692,75,1,0,0,0,693,698,
        3,78,39,0,694,696,5,125,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,
        697,1,0,0,0,697,699,3,80,40,0,698,695,1,0,0,0,699,700,1,0,0,0,700,
        698,1,0,0,0,700,701,1,0,0,0,701,77,1,0,0,0,702,704,5,6,0,0,703,705,
        5,125,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,710,1,0,0,0,706,708,
        3,174,87,0,707,709,5,125,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,
        711,1,0,0,0,710,706,1,0,0,0,710,711,1,0,0,0,711,716,1,0,0,0,712,
        714,3,90,45,0,713,715,5,125,0,0,714,713,1,0,0,0,714,715,1,0,0,0,
        715,717,1,0,0,0,716,712,1,0,0,0,716,717,1,0,0,0,717,722,1,0,0,0,
        718,720,3,86,43,0,719,721,5,125,0,0,720,719,1,0,0,0,720,721,1,0,
        0,0,721,723,1,0,0,0,722,718,1,0,0,0,722,723,1,0,0,0,723,724,1,0,
        0,0,724,725,5,7,0,0,725,79,1,0,0,0,726,728,3,82,41,0,727,729,5,125,
        0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,731,3,78,
        39,0,731,81,1,0,0,0,732,734,3,200,100,0,733,735,5,125,0,0,734,733,
        1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,738,3,204,102,0,737,
        739,5,125,0,0,738,737,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,
        742,3,84,42,0,741,740,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,
        745,5,125,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,
        748,3,204,102,0,747,749,5,125,0,0,748,747,1,0,0,0,748,749,1,0,0,
        0,749,750,1,0,0,0,750,751,3,202,101,0,751,797,1,0,0,0,752,754,3,
        200,100,0,753,755,5,125,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,
        756,1,0,0,0,756,758,3,204,102,0,757,759,5,125,0,0,758,757,1,0,0,
        0,758,759,1,0,0,0,759,761,1,0,0,0,760,762,3,84,42,0,761,760,1,0,
        0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,765,5,125,0,0,764,763,1,
        0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,3,204,102,0,767,797,
        1,0,0,0,768,770,3,204,102,0,769,771,5,125,0,0,770,769,1,0,0,0,770,
        771,1,0,0,0,771,773,1,0,0,0,772,774,3,84,42,0,773,772,1,0,0,0,773,
        774,1,0,0,0,774,776,1,0,0,0,775,777,5,125,0,0,776,775,1,0,0,0,776,
        777,1,0,0,0,777,778,1,0,0,0,778,780,3,204,102,0,779,781,5,125,0,
        0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,3,202,
        101,0,783,797,1,0,0,0,784,786,3,204,102,0,785,787,5,125,0,0,786,
        785,1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,790,3,84,42,0,789,
        788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,793,5,125,0,0,792,
        791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,795,3,204,102,0,
        795,797,1,0,0,0,796,732,1,0,0,0,796,752,1,0,0,0,796,768,1,0,0,0,
        796,784,1,0,0,0,797,83,1,0,0,0,798,800,5,8,0,0,799,801,5,125,0,0,
        800,799,1,0,0,0,800,801,1,0,0,0,801,806,1,0,0,0,802,804,3,174,87,
        0,803,805,5,125,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,
        0,0,806,802,1,0,0,0,806,807,1,0,0,0,807,812,1,0,0,0,808,810,3,88,
        44,0,809,811,5,125,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,813,1,
        0,0,0,812,808,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,816,3,
        94,47,0,815,814,1,0,0,0,815,816,1,0,0,0,816,821,1,0,0,0,817,819,
        3,86,43,0,818,820,5,125,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
        822,1,0,0,0,821,817,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,
        824,5,9,0,0,824,85,1,0,0,0,825,828,3,188,94,0,826,828,3,192,96,0,
        827,825,1,0,0,0,827,826,1,0,0,0,828,87,1,0,0,0,829,831,5,10,0,0,
        830,832,5,125,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,
        0,833,847,3,98,49,0,834,836,5,125,0,0,835,834,1,0,0,0,835,836,1,
        0,0,0,836,837,1,0,0,0,837,839,5,11,0,0,838,840,5,10,0,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,843,5,125,0,0,842,841,
        1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,846,3,98,49,0,845,835,
        1,0,0,0,846,849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,89,1,
        0,0,0,849,847,1,0,0,0,850,857,3,92,46,0,851,853,5,125,0,0,852,851,
        1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,856,3,92,46,0,855,852,
        1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,91,1,
        0,0,0,859,857,1,0,0,0,860,862,5,10,0,0,861,863,5,125,0,0,862,861,
        1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,3,96,48,0,865,93,
        1,0,0,0,866,868,5,5,0,0,867,869,5,125,0,0,868,867,1,0,0,0,868,869,
        1,0,0,0,869,874,1,0,0,0,870,872,3,182,91,0,871,873,5,125,0,0,872,
        871,1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,870,1,0,0,0,874,
        875,1,0,0,0,875,886,1,0,0,0,876,878,5,12,0,0,877,879,5,125,0,0,878,
        877,1,0,0,0,878,879,1,0,0,0,879,884,1,0,0,0,880,882,3,182,91,0,881,
        883,5,125,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,
        880,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,876,1,0,0,0,886,
        887,1,0,0,0,887,95,1,0,0,0,888,889,3,194,97,0,889,97,1,0,0,0,890,
        891,3,194,97,0,891,99,1,0,0,0,892,897,3,138,69,0,893,895,5,125,0,
        0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,3,136,
        68,0,897,894,1,0,0,0,898,899,1,0,0,0,899,897,1,0,0,0,899,900,1,0,
        0,0,900,101,1,0,0,0,901,902,3,104,52,0,902,103,1,0,0,0,903,910,3,
        106,53,0,904,905,5,125,0,0,905,906,5,73,0,0,906,907,5,125,0,0,907,
        909,3,106,53,0,908,904,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,
        911,1,0,0,0,911,105,1,0,0,0,912,910,1,0,0,0,913,920,3,108,54,0,914,
        915,5,125,0,0,915,916,5,74,0,0,916,917,5,125,0,0,917,919,3,108,54,
        0,918,914,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,
        0,921,107,1,0,0,0,922,920,1,0,0,0,923,930,3,110,55,0,924,925,5,125,
        0,0,925,926,5,75,0,0,926,927,5,125,0,0,927,929,3,110,55,0,928,924,
        1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,109,
        1,0,0,0,932,930,1,0,0,0,933,935,5,76,0,0,934,936,5,125,0,0,935,934,
        1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,933,1,0,0,0,938,941,
        1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,
        1,0,0,0,942,943,3,112,56,0,943,111,1,0,0,0,944,951,3,116,58,0,945,
        947,5,125,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,
        950,3,114,57,0,949,946,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,
        952,1,0,0,0,952,113,1,0,0,0,953,951,1,0,0,0,954,956,5,3,0,0,955,
        957,5,125,0,0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,
        985,3,116,58,0,959,961,5,13,0,0,960,962,5,125,0,0,961,960,1,0,0,
        0,961,962,1,0,0,0,962,963,1,0,0,0,963,985,3,116,58,0,964,966,5,14,
        0,0,965,967,5,125,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,
        0,0,0,968,985,3,116,58,0,969,971,5,15,0,0,970,972,5,125,0,0,971,
        970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,985,3,116,58,0,974,
        976,5,16,0,0,975,977,5,125,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,
        978,1,0,0,0,978,985,3,116,58,0,979,981,5,17,0,0,980,982,5,125,0,
        0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,985,3,116,
        58,0,984,954,1,0,0,0,984,959,1,0,0,0,984,964,1,0,0,0,984,969,1,0,
        0,0,984,974,1,0,0,0,984,979,1,0,0,0,985,115,1,0,0,0,986,992,3,124,
        62,0,987,991,3,118,59,0,988,991,3,120,60,0,989,991,3,122,61,0,990,
        987,1,0,0,0,990,988,1,0,0,0,990,989,1,0,0,0,991,994,1,0,0,0,992,
        990,1,0,0,0,992,993,1,0,0,0,993,117,1,0,0,0,994,992,1,0,0,0,995,
        996,5,125,0,0,996,997,5,77,0,0,997,998,5,125,0,0,998,1006,5,61,0,
        0,999,1000,5,125,0,0,1000,1001,5,78,0,0,1001,1002,5,125,0,0,1002,
        1006,5,61,0,0,1003,1004,5,125,0,0,1004,1006,5,79,0,0,1005,995,1,
        0,0,0,1005,999,1,0,0,0,1005,1003,1,0,0,0,1006,1008,1,0,0,0,1007,
        1009,5,125,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,
        0,0,1010,1011,3,124,62,0,1011,119,1,0,0,0,1012,1013,5,125,0,0,1013,
        1015,5,80,0,0,1014,1016,5,125,0,0,1015,1014,1,0,0,0,1015,1016,1,
        0,0,0,1016,1017,1,0,0,0,1017,1018,3,124,62,0,1018,121,1,0,0,0,1019,
        1020,5,125,0,0,1020,1021,5,81,0,0,1021,1022,5,125,0,0,1022,1030,
        5,82,0,0,1023,1024,5,125,0,0,1024,1025,5,81,0,0,1025,1026,5,125,
        0,0,1026,1027,5,76,0,0,1027,1028,5,125,0,0,1028,1030,5,82,0,0,1029,
        1019,1,0,0,0,1029,1023,1,0,0,0,1030,123,1,0,0,0,1031,1050,3,126,
        63,0,1032,1034,5,125,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,
        1035,1,0,0,0,1035,1037,5,18,0,0,1036,1038,5,125,0,0,1037,1036,1,
        0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1049,3,126,63,0,1040,
        1042,5,125,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,
        0,0,1043,1045,5,19,0,0,1044,1046,5,125,0,0,1045,1044,1,0,0,0,1045,
        1046,1,0,0,0,1046,1047,1,0,0,0,1047,1049,3,126,63,0,1048,1033,1,
        0,0,0,1048,1041,1,0,0,0,1049,1052,1,0,0,0,1050,1048,1,0,0,0,1050,
        1051,1,0,0,0,1051,125,1,0,0,0,1052,1050,1,0,0,0,1053,1080,3,128,
        64,0,1054,1056,5,125,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,
        1057,1,0,0,0,1057,1059,5,5,0,0,1058,1060,5,125,0,0,1059,1058,1,0,
        0,0,1059,1060,1,0,0,0,1060,1061,1,0,0,0,1061,1079,3,128,64,0,1062,
        1064,5,125,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,
        0,0,1065,1067,5,20,0,0,1066,1068,5,125,0,0,1067,1066,1,0,0,0,1067,
        1068,1,0,0,0,1068,1069,1,0,0,0,1069,1079,3,128,64,0,1070,1072,5,
        125,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,
        1075,5,21,0,0,1074,1076,5,125,0,0,1075,1074,1,0,0,0,1075,1076,1,
        0,0,0,1076,1077,1,0,0,0,1077,1079,3,128,64,0,1078,1055,1,0,0,0,1078,
        1063,1,0,0,0,1078,1071,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,
        0,1080,1081,1,0,0,0,1081,127,1,0,0,0,1082,1080,1,0,0,0,1083,1094,
        3,130,65,0,1084,1086,5,125,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,
        0,1086,1087,1,0,0,0,1087,1089,5,22,0,0,1088,1090,5,125,0,0,1089,
        1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1093,3,130,
        65,0,1092,1085,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,
        1095,1,0,0,0,1095,129,1,0,0,0,1096,1094,1,0,0,0,1097,1104,3,132,
        66,0,1098,1100,7,1,0,0,1099,1101,5,125,0,0,1100,1099,1,0,0,0,1100,
        1101,1,0,0,0,1101,1102,1,0,0,0,1102,1104,3,132,66,0,1103,1097,1,
        0,0,0,1103,1098,1,0,0,0,1104,131,1,0,0,0,1105,1116,3,138,69,0,1106,
        1108,5,125,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,
        0,0,1109,1115,3,134,67,0,1110,1112,5,125,0,0,1111,1110,1,0,0,0,1111,
        1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,3,136,68,0,1114,1107,1,
        0,0,0,1114,1111,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,
        1117,1,0,0,0,1117,1123,1,0,0,0,1118,1116,1,0,0,0,1119,1121,5,125,
        0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1124,
        3,90,45,0,1123,1120,1,0,0,0,1123,1124,1,0,0,0,1124,133,1,0,0,0,1125,
        1126,5,8,0,0,1126,1127,3,102,51,0,1127,1128,5,9,0,0,1128,1139,1,
        0,0,0,1129,1131,5,8,0,0,1130,1132,3,102,51,0,1131,1130,1,0,0,0,1131,
        1132,1,0,0,0,1132,1133,1,0,0,0,1133,1135,5,12,0,0,1134,1136,3,102,
        51,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,
        1139,5,9,0,0,1138,1125,1,0,0,0,1138,1129,1,0,0,0,1139,135,1,0,0,
        0,1140,1142,5,23,0,0,1141,1143,5,125,0,0,1142,1141,1,0,0,0,1142,
        1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,3,190,95,0,1145,137,1,0,
        0,0,1146,1171,3,176,88,0,1147,1171,3,192,96,0,1148,1171,3,140,70,
        0,1149,1151,5,83,0,0,1150,1152,5,125,0,0,1151,1150,1,0,0,0,1151,
        1152,1,0,0,0,1152,1153,1,0,0,0,1153,1155,5,6,0,0,1154,1156,5,125,
        0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1159,
        5,5,0,0,1158,1160,5,125,0,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,
        1160,1161,1,0,0,0,1161,1171,5,7,0,0,1162,1171,3,144,72,0,1163,1171,
        3,146,73,0,1164,1171,3,148,74,0,1165,1171,3,152,76,0,1166,1171,3,
        154,77,0,1167,1171,3,158,79,0,1168,1171,3,162,81,0,1169,1171,3,174,
        87,0,1170,1146,1,0,0,0,1170,1147,1,0,0,0,1170,1148,1,0,0,0,1170,
        1149,1,0,0,0,1170,1162,1,0,0,0,1170,1163,1,0,0,0,1170,1164,1,0,0,
        0,1170,1165,1,0,0,0,1170,1166,1,0,0,0,1170,1167,1,0,0,0,1170,1168,
        1,0,0,0,1170,1169,1,0,0,0,1171,139,1,0,0,0,1172,1177,5,84,0,0,1173,
        1175,5,125,0,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,1176,1,0,
        0,0,1176,1178,3,142,71,0,1177,1174,1,0,0,0,1178,1179,1,0,0,0,1179,
        1177,1,0,0,0,1179,1180,1,0,0,0,1180,1195,1,0,0,0,1181,1183,5,84,
        0,0,1182,1184,5,125,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,
        1185,1,0,0,0,1185,1190,3,102,51,0,1186,1188,5,125,0,0,1187,1186,
        1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,3,142,71,0,
        1190,1187,1,0,0,0,1191,1192,1,0,0,0,1192,1190,1,0,0,0,1192,1193,
        1,0,0,0,1193,1195,1,0,0,0,1194,1172,1,0,0,0,1194,1181,1,0,0,0,1195,
        1204,1,0,0,0,1196,1198,5,125,0,0,1197,1196,1,0,0,0,1197,1198,1,0,
        0,0,1198,1199,1,0,0,0,1199,1201,5,85,0,0,1200,1202,5,125,0,0,1201,
        1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1205,3,102,
        51,0,1204,1197,1,0,0,0,1204,1205,1,0,0,0,1205,1207,1,0,0,0,1206,
        1208,5,125,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,
        0,0,1209,1210,5,86,0,0,1210,141,1,0,0,0,1211,1213,5,87,0,0,1212,
        1214,5,125,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,
        0,0,1215,1217,3,102,51,0,1216,1218,5,125,0,0,1217,1216,1,0,0,0,1217,
        1218,1,0,0,0,1218,1219,1,0,0,0,1219,1221,5,88,0,0,1220,1222,5,125,
        0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1224,
        3,102,51,0,1224,143,1,0,0,0,1225,1227,5,8,0,0,1226,1228,5,125,0,
        0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1238,
        3,150,75,0,1230,1232,5,125,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,
        0,1232,1233,1,0,0,0,1233,1235,5,11,0,0,1234,1236,5,125,0,0,1235,
        1234,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1239,3,102,
        51,0,1238,1231,1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,
        1242,5,125,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,
        0,0,1243,1244,5,9,0,0,1244,145,1,0,0,0,1245,1247,5,8,0,0,1246,1248,
        5,125,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1257,1,0,0,0,
        1249,1251,3,174,87,0,1250,1252,5,125,0,0,1251,1250,1,0,0,0,1251,
        1252,1,0,0,0,1252,1253,1,0,0,0,1253,1255,5,3,0,0,1254,1256,5,125,
        0,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,0,1257,1249,
        1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,3,76,38,0,
        1260,1262,5,125,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1267,
        1,0,0,0,1263,1265,3,66,33,0,1264,1266,5,125,0,0,1265,1264,1,0,0,
        0,1265,1266,1,0,0,0,1266,1268,1,0,0,0,1267,1263,1,0,0,0,1267,1268,
        1,0,0,0,1268,1269,1,0,0,0,1269,1271,5,11,0,0,1270,1272,5,125,0,0,
        1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1275,
        3,102,51,0,1274,1276,5,125,0,0,1275,1274,1,0,0,0,1275,1276,1,0,0,
        0,1276,1277,1,0,0,0,1277,1278,5,9,0,0,1278,147,1,0,0,0,1279,1281,
        5,47,0,0,1280,1282,5,125,0,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,
        1282,1283,1,0,0,0,1283,1285,5,6,0,0,1284,1286,5,125,0,0,1285,1284,
        1,0,0,0,1285,1286,1,0,0,0,1286,1287,1,0,0,0,1287,1289,3,150,75,0,
        1288,1290,5,125,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,
        1,0,0,0,1291,1292,5,7,0,0,1292,1336,1,0,0,0,1293,1295,5,89,0,0,1294,
        1296,5,125,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,
        0,0,1297,1299,5,6,0,0,1298,1300,5,125,0,0,1299,1298,1,0,0,0,1299,
        1300,1,0,0,0,1300,1301,1,0,0,0,1301,1303,3,150,75,0,1302,1304,5,
        125,0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,
        1306,5,7,0,0,1306,1336,1,0,0,0,1307,1309,5,90,0,0,1308,1310,5,125,
        0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1313,
        5,6,0,0,1312,1314,5,125,0,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,
        1314,1315,1,0,0,0,1315,1317,3,150,75,0,1316,1318,5,125,0,0,1317,
        1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,7,0,
        0,1320,1336,1,0,0,0,1321,1323,5,91,0,0,1322,1324,5,125,0,0,1323,
        1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1327,5,6,0,
        0,1326,1328,5,125,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,
        1,0,0,0,1329,1331,3,150,75,0,1330,1332,5,125,0,0,1331,1330,1,0,0,
        0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,5,7,0,0,1334,1336,
        1,0,0,0,1335,1279,1,0,0,0,1335,1293,1,0,0,0,1335,1307,1,0,0,0,1335,
        1321,1,0,0,0,1336,149,1,0,0,0,1337,1342,3,156,78,0,1338,1340,5,125,
        0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1343,
        3,66,33,0,1342,1339,1,0,0,0,1342,1343,1,0,0,0,1343,151,1,0,0,0,1344,
        1345,3,76,38,0,1345,153,1,0,0,0,1346,1348,5,6,0,0,1347,1349,5,125,
        0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,0,0,1350,1352,
        3,102,51,0,1351,1353,5,125,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,
        0,1353,1354,1,0,0,0,1354,1355,5,7,0,0,1355,155,1,0,0,0,1356,1357,
        3,174,87,0,1357,1358,5,125,0,0,1358,1359,5,80,0,0,1359,1360,5,125,
        0,0,1360,1361,3,102,51,0,1361,157,1,0,0,0,1362,1364,3,160,80,0,1363,
        1365,5,125,0,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,0,
        0,0,1366,1368,5,6,0,0,1367,1369,5,125,0,0,1368,1367,1,0,0,0,1368,
        1369,1,0,0,0,1369,1374,1,0,0,0,1370,1372,5,63,0,0,1371,1373,5,125,
        0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1370,
        1,0,0,0,1374,1375,1,0,0,0,1375,1393,1,0,0,0,1376,1378,3,102,51,0,
        1377,1379,5,125,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1390,
        1,0,0,0,1380,1382,5,2,0,0,1381,1383,5,125,0,0,1382,1381,1,0,0,0,
        1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,102,51,0,1385,1387,
        5,125,0,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,
        1388,1380,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,
        1,0,0,0,1391,1394,1,0,0,0,1392,1390,1,0,0,0,1393,1376,1,0,0,0,1393,
        1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,7,0,0,1396,159,1,0,0,
        0,1397,1398,3,172,86,0,1398,1399,3,198,99,0,1399,161,1,0,0,0,1400,
        1402,5,92,0,0,1401,1403,5,125,0,0,1402,1401,1,0,0,0,1402,1403,1,
        0,0,0,1403,1404,1,0,0,0,1404,1406,5,24,0,0,1405,1407,5,125,0,0,1406,
        1405,1,0,0,0,1406,1407,1,0,0,0,1407,1416,1,0,0,0,1408,1417,3,6,3,
        0,1409,1414,3,68,34,0,1410,1412,5,125,0,0,1411,1410,1,0,0,0,1411,
        1412,1,0,0,0,1412,1413,1,0,0,0,1413,1415,3,66,33,0,1414,1411,1,0,
        0,0,1414,1415,1,0,0,0,1415,1417,1,0,0,0,1416,1408,1,0,0,0,1416,1409,
        1,0,0,0,1417,1419,1,0,0,0,1418,1420,5,125,0,0,1419,1418,1,0,0,0,
        1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1422,5,25,0,0,1422,163,
        1,0,0,0,1423,1425,3,170,85,0,1424,1426,5,125,0,0,1425,1424,1,0,0,
        0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1429,5,6,0,0,1428,1430,
        5,125,0,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1448,1,0,0,0,
        1431,1433,3,102,51,0,1432,1434,5,125,0,0,1433,1432,1,0,0,0,1433,
        1434,1,0,0,0,1434,1445,1,0,0,0,1435,1437,5,2,0,0,1436,1438,5,125,
        0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1441,
        3,102,51,0,1440,1442,5,125,0,0,1441,1440,1,0,0,0,1441,1442,1,0,0,
        0,1442,1444,1,0,0,0,1443,1435,1,0,0,0,1444,1447,1,0,0,0,1445,1443,
        1,0,0,0,1445,1446,1,0,0,0,1446,1449,1,0,0,0,1447,1445,1,0,0,0,1448,
        1431,1,0,0,0,1448,1449,1,0,0,0,1449,1450,1,0,0,0,1450,1451,5,7,0,
        0,1451,165,1,0,0,0,1452,1453,3,170,85,0,1453,167,1,0,0,0,1454,1455,
        3,198,99,0,1455,169,1,0,0,0,1456,1457,3,172,86,0,1457,1458,3,198,
        99,0,1458,171,1,0,0,0,1459,1460,3,198,99,0,1460,1461,5,23,0,0,1461,
        1463,1,0,0,0,1462,1459,1,0,0,0,1463,1466,1,0,0,0,1464,1462,1,0,0,
        0,1464,1465,1,0,0,0,1465,173,1,0,0,0,1466,1464,1,0,0,0,1467,1468,
        3,198,99,0,1468,175,1,0,0,0,1469,1476,3,178,89,0,1470,1476,5,82,
        0,0,1471,1476,3,180,90,0,1472,1476,5,107,0,0,1473,1476,3,186,93,
        0,1474,1476,3,188,94,0,1475,1469,1,0,0,0,1475,1470,1,0,0,0,1475,
        1471,1,0,0,0,1475,1472,1,0,0,0,1475,1473,1,0,0,0,1475,1474,1,0,0,
        0,1476,177,1,0,0,0,1477,1478,7,2,0,0,1478,179,1,0,0,0,1479,1482,
        3,184,92,0,1480,1482,3,182,91,0,1481,1479,1,0,0,0,1481,1480,1,0,
        0,0,1482,181,1,0,0,0,1483,1484,7,3,0,0,1484,183,1,0,0,0,1485,1486,
        7,4,0,0,1486,185,1,0,0,0,1487,1489,5,8,0,0,1488,1490,5,125,0,0,1489,
        1488,1,0,0,0,1489,1490,1,0,0,0,1490,1508,1,0,0,0,1491,1493,3,102,
        51,0,1492,1494,5,125,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
        1505,1,0,0,0,1495,1497,5,2,0,0,1496,1498,5,125,0,0,1497,1496,1,0,
        0,0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,3,102,51,0,1500,
        1502,5,125,0,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,
        0,0,1503,1495,1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,1505,1506,
        1,0,0,0,1506,1509,1,0,0,0,1507,1505,1,0,0,0,1508,1491,1,0,0,0,1508,
        1509,1,0,0,0,1509,1510,1,0,0,0,1510,1511,5,9,0,0,1511,187,1,0,0,
        0,1512,1514,5,24,0,0,1513,1515,5,125,0,0,1514,1513,1,0,0,0,1514,
        1515,1,0,0,0,1515,1549,1,0,0,0,1516,1518,3,190,95,0,1517,1519,5,
        125,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,
        1522,5,10,0,0,1521,1523,5,125,0,0,1522,1521,1,0,0,0,1522,1523,1,
        0,0,0,1523,1524,1,0,0,0,1524,1526,3,102,51,0,1525,1527,5,125,0,0,
        1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1546,1,0,0,0,1528,1530,
        5,2,0,0,1529,1531,5,125,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,
        1531,1532,1,0,0,0,1532,1534,3,190,95,0,1533,1535,5,125,0,0,1534,
        1533,1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1538,5,10,
        0,0,1537,1539,5,125,0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,
        1540,1,0,0,0,1540,1542,3,102,51,0,1541,1543,5,125,0,0,1542,1541,
        1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1528,1,0,0,0,1545,
        1548,1,0,0,0,1546,1544,1,0,0,0,1546,1547,1,0,0,0,1547,1550,1,0,0,
        0,1548,1546,1,0,0,0,1549,1516,1,0,0,0,1549,1550,1,0,0,0,1550,1551,
        1,0,0,0,1551,1552,5,25,0,0,1552,189,1,0,0,0,1553,1554,3,194,97,0,
        1554,191,1,0,0,0,1555,1558,5,26,0,0,1556,1559,3,198,99,0,1557,1559,
        5,96,0,0,1558,1556,1,0,0,0,1558,1557,1,0,0,0,1559,193,1,0,0,0,1560,
        1563,3,198,99,0,1561,1563,3,196,98,0,1562,1560,1,0,0,0,1562,1561,
        1,0,0,0,1563,195,1,0,0,0,1564,1565,7,5,0,0,1565,197,1,0,0,0,1566,
        1567,7,6,0,0,1567,199,1,0,0,0,1568,1569,7,7,0,0,1569,201,1,0,0,0,
        1570,1571,7,8,0,0,1571,203,1,0,0,0,1572,1573,7,9,0,0,1573,205,1,
        0,0,0,291,207,211,214,217,225,229,234,241,246,249,253,257,261,267,
        271,276,281,285,288,290,294,298,303,307,312,316,325,330,334,338,
        342,345,349,359,366,379,383,389,393,397,402,407,411,417,421,427,
        431,437,441,445,449,453,457,462,469,473,478,485,491,496,502,505,
        511,513,517,521,526,530,533,540,547,550,556,559,565,569,573,577,
        581,586,591,595,600,603,612,621,626,639,642,650,654,659,664,668,
        673,679,684,691,695,700,704,708,710,714,716,720,722,728,734,738,
        741,744,748,754,758,761,764,770,773,776,780,786,789,792,796,800,
        804,806,810,812,815,819,821,827,831,835,839,842,847,852,857,862,
        868,872,874,878,882,884,886,894,899,910,920,930,935,939,946,951,
        956,961,966,971,976,981,984,990,992,1005,1008,1015,1029,1033,1037,
        1041,1045,1048,1050,1055,1059,1063,1067,1071,1075,1078,1080,1085,
        1089,1094,1100,1103,1107,1111,1114,1116,1120,1123,1131,1135,1138,
        1142,1151,1155,1159,1170,1174,1179,1183,1187,1192,1194,1197,1201,
        1204,1207,1213,1217,1221,1227,1231,1235,1238,1241,1247,1251,1255,
        1257,1261,1265,1267,1271,1275,1281,1285,1289,1295,1299,1303,1309,
        1313,1317,1323,1327,1331,1335,1339,1342,1348,1352,1364,1368,1372,
        1374,1378,1382,1386,1390,1393,1402,1406,1411,1414,1416,1419,1425,
        1429,1433,1437,1441,1445,1448,1464,1475,1481,1489,1493,1497,1501,
        1505,1508,1514,1518,1522,1526,1530,1534,1538,1542,1546,1549,1558,
        1562
    ]

class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'+='", "'*'", "'('", 
                     "')'", "'['", "']'", "':'", "'|'", "'..'", "'<>'", 
                     "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", "'/'", 
                     "'%'", "'^'", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", 
                     "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", 
                     "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", 
                     "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
                     "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", 
                     "'\\uFE63'", "'\\uFF0D'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_Statement = 1
    RULE_oC_Query = 2
    RULE_oC_RegularQuery = 3
    RULE_oC_Union = 4
    RULE_oC_SingleQuery = 5
    RULE_oC_SinglePartQuery = 6
    RULE_oC_MultiPartQuery = 7
    RULE_oC_UpdatingClause = 8
    RULE_oC_ReadingClause = 9
    RULE_oC_Match = 10
    RULE_oC_Unwind = 11
    RULE_oC_Merge = 12
    RULE_oC_MergeAction = 13
    RULE_oC_Create = 14
    RULE_oC_Set = 15
    RULE_oC_SetItem = 16
    RULE_oC_Delete = 17
    RULE_oC_Remove = 18
    RULE_oC_RemoveItem = 19
    RULE_oC_InQueryCall = 20
    RULE_oC_StandaloneCall = 21
    RULE_oC_YieldItems = 22
    RULE_oC_YieldItem = 23
    RULE_oC_With = 24
    RULE_oC_Return = 25
    RULE_oC_ProjectionBody = 26
    RULE_oC_ProjectionItems = 27
    RULE_oC_ProjectionItem = 28
    RULE_oC_Order = 29
    RULE_oC_Skip = 30
    RULE_oC_Limit = 31
    RULE_oC_SortItem = 32
    RULE_oC_Where = 33
    RULE_oC_Pattern = 34
    RULE_oC_PatternPart = 35
    RULE_oC_AnonymousPatternPart = 36
    RULE_oC_PatternElement = 37
    RULE_oC_RelationshipsPattern = 38
    RULE_oC_NodePattern = 39
    RULE_oC_PatternElementChain = 40
    RULE_oC_RelationshipPattern = 41
    RULE_oC_RelationshipDetail = 42
    RULE_oC_Properties = 43
    RULE_oC_RelationshipTypes = 44
    RULE_oC_NodeLabels = 45
    RULE_oC_NodeLabel = 46
    RULE_oC_RangeLiteral = 47
    RULE_oC_LabelName = 48
    RULE_oC_RelTypeName = 49
    RULE_oC_PropertyExpression = 50
    RULE_oC_Expression = 51
    RULE_oC_OrExpression = 52
    RULE_oC_XorExpression = 53
    RULE_oC_AndExpression = 54
    RULE_oC_NotExpression = 55
    RULE_oC_ComparisonExpression = 56
    RULE_oC_PartialComparisonExpression = 57
    RULE_oC_StringListNullPredicateExpression = 58
    RULE_oC_StringPredicateExpression = 59
    RULE_oC_ListPredicateExpression = 60
    RULE_oC_NullPredicateExpression = 61
    RULE_oC_AddOrSubtractExpression = 62
    RULE_oC_MultiplyDivideModuloExpression = 63
    RULE_oC_PowerOfExpression = 64
    RULE_oC_UnaryAddOrSubtractExpression = 65
    RULE_oC_NonArithmeticOperatorExpression = 66
    RULE_oC_ListOperatorExpression = 67
    RULE_oC_PropertyLookup = 68
    RULE_oC_Atom = 69
    RULE_oC_CaseExpression = 70
    RULE_oC_CaseAlternative = 71
    RULE_oC_ListComprehension = 72
    RULE_oC_PatternComprehension = 73
    RULE_oC_Quantifier = 74
    RULE_oC_FilterExpression = 75
    RULE_oC_PatternPredicate = 76
    RULE_oC_ParenthesizedExpression = 77
    RULE_oC_IdInColl = 78
    RULE_oC_FunctionInvocation = 79
    RULE_oC_FunctionName = 80
    RULE_oC_ExistentialSubquery = 81
    RULE_oC_ExplicitProcedureInvocation = 82
    RULE_oC_ImplicitProcedureInvocation = 83
    RULE_oC_ProcedureResultField = 84
    RULE_oC_ProcedureName = 85
    RULE_oC_Namespace = 86
    RULE_oC_Variable = 87
    RULE_oC_Literal = 88
    RULE_oC_BooleanLiteral = 89
    RULE_oC_NumberLiteral = 90
    RULE_oC_IntegerLiteral = 91
    RULE_oC_DoubleLiteral = 92
    RULE_oC_ListLiteral = 93
    RULE_oC_MapLiteral = 94
    RULE_oC_PropertyKeyName = 95
    RULE_oC_Parameter = 96
    RULE_oC_SchemaName = 97
    RULE_oC_ReservedWord = 98
    RULE_oC_SymbolicName = 99
    RULE_oC_LeftArrowHead = 100
    RULE_oC_RightArrowHead = 101
    RULE_oC_Dash = 102

    ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_RelationshipsPattern", "oC_NodePattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_RelationshipDetail", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                   "oC_NonArithmeticOperatorExpression", "oC_ListOperatorExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    UNION=46
    ALL=47
    OPTIONAL=48
    MATCH=49
    UNWIND=50
    AS=51
    MERGE=52
    ON=53
    CREATE=54
    SET=55
    DETACH=56
    DELETE=57
    REMOVE=58
    CALL=59
    YIELD=60
    WITH=61
    RETURN=62
    DISTINCT=63
    ORDER=64
    BY=65
    L_SKIP=66
    LIMIT=67
    ASCENDING=68
    ASC=69
    DESCENDING=70
    DESC=71
    WHERE=72
    OR=73
    XOR=74
    AND=75
    NOT=76
    STARTS=77
    ENDS=78
    CONTAINS=79
    IN=80
    IS=81
    NULL=82
    COUNT=83
    CASE=84
    ELSE=85
    END=86
    WHEN=87
    THEN=88
    ANY=89
    NONE=90
    SINGLE=91
    EXISTS=92
    TRUE=93
    FALSE=94
    HexInteger=95
    DecimalInteger=96
    OctalInteger=97
    HexLetter=98
    HexDigit=99
    Digit=100
    NonZeroDigit=101
    NonZeroOctDigit=102
    OctDigit=103
    ZeroDigit=104
    ExponentDecimalReal=105
    RegularDecimalReal=106
    StringLiteral=107
    EscapedChar=108
    CONSTRAINT=109
    DO=110
    FOR=111
    REQUIRE=112
    UNIQUE=113
    MANDATORY=114
    SCALAR=115
    OF=116
    ADD=117
    DROP=118
    FILTER=119
    EXTRACT=120
    UnescapedSymbolicName=121
    IdentifierStart=122
    IdentifierPart=123
    EscapedSymbolicName=124
    SP=125
    WHITESPACE=126
    Comment=127

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 206
                self.match(CypherParser.SP)


            self.state = 209
            self.oC_Statement()
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 210
                    self.match(CypherParser.SP)


                self.state = 213
                self.match(CypherParser.T__0)


            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 216
                self.match(CypherParser.SP)


            self.state = 219
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Query)
        try:
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.oC_StandaloneCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.oC_SingleQuery()
            self.state = 234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 228
                        self.match(CypherParser.SP)


                    self.state = 231
                    self.oC_Union() 
                self.state = 236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(CypherParser.UNION)
                self.state = 238
                self.match(CypherParser.SP)
                self.state = 239
                self.match(CypherParser.ALL)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 240
                    self.match(CypherParser.SP)


                self.state = 243
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.match(CypherParser.UNION)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 245
                    self.match(CypherParser.SP)


                self.state = 248
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_SingleQuery)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                    self.state = 255
                    self.oC_ReadingClause()
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 256
                        self.match(CypherParser.SP)


                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 264
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                    self.state = 265
                    self.oC_ReadingClause()
                    self.state = 267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 266
                        self.match(CypherParser.SP)


                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self.oC_UpdatingClause()
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 275
                            self.match(CypherParser.SP)


                        self.state = 278
                        self.oC_UpdatingClause() 
                    self.state = 283
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 284
                        self.match(CypherParser.SP)


                    self.state = 287
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                        self.state = 292
                        self.oC_ReadingClause()
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 293
                            self.match(CypherParser.SP)


                        self.state = 300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 562949953421312000) != 0):
                        self.state = 301
                        self.oC_UpdatingClause()
                        self.state = 303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 302
                            self.match(CypherParser.SP)


                        self.state = 309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 310
                    self.oC_With()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 311
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 318
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_UpdatingClause)
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.oC_Create()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.oC_Merge()
                pass
            elif token in [56, 57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.oC_Delete()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.oC_Set()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.oC_Remove()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_ReadingClause)
        try:
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.oC_Match()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.oC_Unwind()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 3)
                self.state = 329
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 332
                self.match(CypherParser.OPTIONAL)
                self.state = 333
                self.match(CypherParser.SP)


            self.state = 336
            self.match(CypherParser.MATCH)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 337
                self.match(CypherParser.SP)


            self.state = 340
            self.oC_Pattern()
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 341
                    self.match(CypherParser.SP)


                self.state = 344
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(CypherParser.UNWIND)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 348
                self.match(CypherParser.SP)


            self.state = 351
            self.oC_Expression()
            self.state = 352
            self.match(CypherParser.SP)
            self.state = 353
            self.match(CypherParser.AS)
            self.state = 354
            self.match(CypherParser.SP)
            self.state = 355
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CypherParser.MERGE)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 358
                self.match(CypherParser.SP)


            self.state = 361
            self.oC_PatternPart()
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 362
                    self.match(CypherParser.SP)
                    self.state = 363
                    self.oC_MergeAction() 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_MergeAction)
        try:
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.match(CypherParser.ON)
                self.state = 370
                self.match(CypherParser.SP)
                self.state = 371
                self.match(CypherParser.MATCH)
                self.state = 372
                self.match(CypherParser.SP)
                self.state = 373
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.match(CypherParser.ON)
                self.state = 375
                self.match(CypherParser.SP)
                self.state = 376
                self.match(CypherParser.CREATE)
                self.state = 377
                self.match(CypherParser.SP)
                self.state = 378
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(CypherParser.CREATE)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 382
                self.match(CypherParser.SP)


            self.state = 385
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(CypherParser.SET)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 388
                self.match(CypherParser.SP)


            self.state = 391
            self.oC_SetItem()
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 392
                        self.match(CypherParser.SP)


                    self.state = 395
                    self.match(CypherParser.T__1)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 396
                        self.match(CypherParser.SP)


                    self.state = 399
                    self.oC_SetItem() 
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.oC_PropertyExpression()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 406
                    self.match(CypherParser.SP)


                self.state = 409
                self.match(CypherParser.T__2)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 410
                    self.match(CypherParser.SP)


                self.state = 413
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.oC_Variable()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 416
                    self.match(CypherParser.SP)


                self.state = 419
                self.match(CypherParser.T__2)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 420
                    self.match(CypherParser.SP)


                self.state = 423
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.oC_Variable()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 426
                    self.match(CypherParser.SP)


                self.state = 429
                self.match(CypherParser.T__3)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 430
                    self.match(CypherParser.SP)


                self.state = 433
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.oC_Variable()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 436
                    self.match(CypherParser.SP)


                self.state = 439
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 443
                self.match(CypherParser.DETACH)
                self.state = 444
                self.match(CypherParser.SP)


            self.state = 447
            self.match(CypherParser.DELETE)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 448
                self.match(CypherParser.SP)


            self.state = 451
            self.oC_Expression()
            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 452
                        self.match(CypherParser.SP)


                    self.state = 455
                    self.match(CypherParser.T__1)
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 456
                        self.match(CypherParser.SP)


                    self.state = 459
                    self.oC_Expression() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(CypherParser.REMOVE)
            self.state = 466
            self.match(CypherParser.SP)
            self.state = 467
            self.oC_RemoveItem()
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 468
                        self.match(CypherParser.SP)


                    self.state = 471
                    self.match(CypherParser.T__1)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 472
                        self.match(CypherParser.SP)


                    self.state = 475
                    self.oC_RemoveItem() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RemoveItem)
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.oC_Variable()
                self.state = 482
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(CypherParser.CALL)
            self.state = 488
            self.match(CypherParser.SP)
            self.state = 489
            self.oC_ExplicitProcedureInvocation()
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 490
                    self.match(CypherParser.SP)


                self.state = 493
                self.match(CypherParser.YIELD)
                self.state = 494
                self.match(CypherParser.SP)
                self.state = 495
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(CypherParser.CALL)
            self.state = 499
            self.match(CypherParser.SP)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 500
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 501
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 504
                    self.match(CypherParser.SP)


                self.state = 507
                self.match(CypherParser.YIELD)
                self.state = 508
                self.match(CypherParser.SP)
                self.state = 511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 509
                    self.match(CypherParser.T__4)
                    pass
                elif token in [83, 89, 90, 91, 98, 119, 120, 121, 124]:
                    self.state = 510
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.oC_YieldItem()
            self.state = 526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 516
                        self.match(CypherParser.SP)


                    self.state = 519
                    self.match(CypherParser.T__1)
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 520
                        self.match(CypherParser.SP)


                    self.state = 523
                    self.oC_YieldItem() 
                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 529
                    self.match(CypherParser.SP)


                self.state = 532
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 535
                self.oC_ProcedureResultField()
                self.state = 536
                self.match(CypherParser.SP)
                self.state = 537
                self.match(CypherParser.AS)
                self.state = 538
                self.match(CypherParser.SP)


            self.state = 542
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(CypherParser.WITH)
            self.state = 545
            self.oC_ProjectionBody()
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 546
                    self.match(CypherParser.SP)


                self.state = 549
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(CypherParser.RETURN)
            self.state = 553
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 555
                    self.match(CypherParser.SP)


                self.state = 558
                self.match(CypherParser.DISTINCT)


            self.state = 561
            self.match(CypherParser.SP)
            self.state = 562
            self.oC_ProjectionItems()
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 563
                self.match(CypherParser.SP)
                self.state = 564
                self.oC_Order()


            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 567
                self.match(CypherParser.SP)
                self.state = 568
                self.oC_Skip()


            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 571
                self.match(CypherParser.SP)
                self.state = 572
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.match(CypherParser.T__4)
                self.state = 586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 576
                            self.match(CypherParser.SP)


                        self.state = 579
                        self.match(CypherParser.T__1)
                        self.state = 581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 580
                            self.match(CypherParser.SP)


                        self.state = 583
                        self.oC_ProjectionItem() 
                    self.state = 588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass
            elif token in [6, 8, 18, 19, 24, 26, 47, 76, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.oC_ProjectionItem()
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 590
                            self.match(CypherParser.SP)


                        self.state = 593
                        self.match(CypherParser.T__1)
                        self.state = 595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 594
                            self.match(CypherParser.SP)


                        self.state = 597
                        self.oC_ProjectionItem() 
                    self.state = 602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_ProjectionItem)
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.oC_Expression()
                self.state = 606
                self.match(CypherParser.SP)
                self.state = 607
                self.match(CypherParser.AS)
                self.state = 608
                self.match(CypherParser.SP)
                self.state = 609
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(CypherParser.ORDER)
            self.state = 615
            self.match(CypherParser.SP)
            self.state = 616
            self.match(CypherParser.BY)
            self.state = 617
            self.match(CypherParser.SP)
            self.state = 618
            self.oC_SortItem()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 619
                self.match(CypherParser.T__1)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 620
                    self.match(CypherParser.SP)


                self.state = 623
                self.oC_SortItem()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(CypherParser.L_SKIP)
            self.state = 630
            self.match(CypherParser.SP)
            self.state = 631
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(CypherParser.LIMIT)
            self.state = 634
            self.match(CypherParser.SP)
            self.state = 635
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.oC_Expression()
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 638
                    self.match(CypherParser.SP)


                self.state = 641
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(CypherParser.WHERE)
            self.state = 645
            self.match(CypherParser.SP)
            self.state = 646
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.oC_PatternPart()
            self.state = 659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 649
                        self.match(CypherParser.SP)


                    self.state = 652
                    self.match(CypherParser.T__1)
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 653
                        self.match(CypherParser.SP)


                    self.state = 656
                    self.oC_PatternPart() 
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 89, 90, 91, 98, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.oC_Variable()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 663
                    self.match(CypherParser.SP)


                self.state = 666
                self.match(CypherParser.T__2)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 667
                    self.match(CypherParser.SP)


                self.state = 670
                self.oC_AnonymousPatternPart()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.oC_NodePattern()
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 678
                            self.match(CypherParser.SP)


                        self.state = 681
                        self.oC_PatternElementChain() 
                    self.state = 686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.match(CypherParser.T__5)
                self.state = 688
                self.oC_PatternElement()
                self.state = 689
                self.match(CypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.oC_NodePattern()
            self.state = 698 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 694
                        self.match(CypherParser.SP)


                    self.state = 697
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 700 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(CypherParser.T__5)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 703
                self.match(CypherParser.SP)


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059625921) != 0):
                self.state = 706
                self.oC_Variable()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 707
                    self.match(CypherParser.SP)




            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 712
                self.oC_NodeLabels()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 713
                    self.match(CypherParser.SP)




            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or _la==26:
                self.state = 718
                self.oC_Properties()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 719
                    self.match(CypherParser.SP)




            self.state = 724
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.oC_RelationshipPattern()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 727
                self.match(CypherParser.SP)


            self.state = 730
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.oC_LeftArrowHead()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 733
                    self.match(CypherParser.SP)


                self.state = 736
                self.oC_Dash()
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.match(CypherParser.SP)


                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 740
                    self.oC_RelationshipDetail()


                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 743
                    self.match(CypherParser.SP)


                self.state = 746
                self.oC_Dash()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 747
                    self.match(CypherParser.SP)


                self.state = 750
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.oC_LeftArrowHead()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 753
                    self.match(CypherParser.SP)


                self.state = 756
                self.oC_Dash()
                self.state = 758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.match(CypherParser.SP)


                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 760
                    self.oC_RelationshipDetail()


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 763
                    self.match(CypherParser.SP)


                self.state = 766
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.oC_Dash()
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.match(CypherParser.SP)


                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 772
                    self.oC_RelationshipDetail()


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 775
                    self.match(CypherParser.SP)


                self.state = 778
                self.oC_Dash()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 779
                    self.match(CypherParser.SP)


                self.state = 782
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.oC_Dash()
                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.match(CypherParser.SP)


                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 788
                    self.oC_RelationshipDetail()


                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 791
                    self.match(CypherParser.SP)


                self.state = 794
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CypherParser.T__7)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 799
                self.match(CypherParser.SP)


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059625921) != 0):
                self.state = 802
                self.oC_Variable()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 803
                    self.match(CypherParser.SP)




            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 808
                self.oC_RelationshipTypes()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 809
                    self.match(CypherParser.SP)




            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 814
                self.oC_RangeLiteral()


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or _la==26:
                self.state = 817
                self.oC_Properties()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 818
                    self.match(CypherParser.SP)




            self.state = 823
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Properties)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(CypherParser.T__9)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 830
                self.match(CypherParser.SP)


            self.state = 833
            self.oC_RelTypeName()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 834
                        self.match(CypherParser.SP)


                    self.state = 837
                    self.match(CypherParser.T__10)
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 838
                        self.match(CypherParser.T__9)


                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 841
                        self.match(CypherParser.SP)


                    self.state = 844
                    self.oC_RelTypeName() 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.oC_NodeLabel()
            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 851
                        self.match(CypherParser.SP)


                    self.state = 854
                    self.oC_NodeLabel() 
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(CypherParser.T__9)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 861
                self.match(CypherParser.SP)


            self.state = 864
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(CypherParser.T__4)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 867
                self.match(CypherParser.SP)


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 7) != 0):
                self.state = 870
                self.oC_IntegerLiteral()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 871
                    self.match(CypherParser.SP)




            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 876
                self.match(CypherParser.T__11)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 877
                    self.match(CypherParser.SP)


                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 7) != 0):
                    self.state = 880
                    self.oC_IntegerLiteral()
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 881
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.oC_Atom()
            self.state = 897 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 893
                        self.match(CypherParser.SP)


                    self.state = 896
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 899 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.oC_XorExpression()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 904
                    self.match(CypherParser.SP)
                    self.state = 905
                    self.match(CypherParser.OR)
                    self.state = 906
                    self.match(CypherParser.SP)
                    self.state = 907
                    self.oC_XorExpression() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.oC_AndExpression()
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 914
                    self.match(CypherParser.SP)
                    self.state = 915
                    self.match(CypherParser.XOR)
                    self.state = 916
                    self.match(CypherParser.SP)
                    self.state = 917
                    self.oC_AndExpression() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.oC_NotExpression()
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 924
                    self.match(CypherParser.SP)
                    self.state = 925
                    self.match(CypherParser.AND)
                    self.state = 926
                    self.match(CypherParser.SP)
                    self.state = 927
                    self.oC_NotExpression() 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 933
                self.match(CypherParser.NOT)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 934
                    self.match(CypherParser.SP)


                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 942
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.oC_StringListNullPredicateExpression()
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 945
                        self.match(CypherParser.SP)


                    self.state = 948
                    self.oC_PartialComparisonExpression() 
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.match(CypherParser.T__2)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 955
                    self.match(CypherParser.SP)


                self.state = 958
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(CypherParser.T__12)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 960
                    self.match(CypherParser.SP)


                self.state = 963
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.match(CypherParser.T__13)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 965
                    self.match(CypherParser.SP)


                self.state = 968
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 969
                self.match(CypherParser.T__14)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 970
                    self.match(CypherParser.SP)


                self.state = 973
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 5)
                self.state = 974
                self.match(CypherParser.T__15)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 975
                    self.match(CypherParser.SP)


                self.state = 978
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 979
                self.match(CypherParser.T__16)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 980
                    self.match(CypherParser.SP)


                self.state = 983
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_StringPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringPredicateExpressionContext,i)


        def oC_ListPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListPredicateExpressionContext,i)


        def oC_NullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullPredicateExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = CypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.oC_AddOrSubtractExpression()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 990
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 987
                        self.oC_StringPredicateExpression()
                        pass

                    elif la_ == 2:
                        self.state = 988
                        self.oC_ListPredicateExpression()
                        pass

                    elif la_ == 3:
                        self.state = 989
                        self.oC_NullPredicateExpression()
                        pass

             
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = CypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 995
                self.match(CypherParser.SP)
                self.state = 996
                self.match(CypherParser.STARTS)
                self.state = 997
                self.match(CypherParser.SP)
                self.state = 998
                self.match(CypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 999
                self.match(CypherParser.SP)
                self.state = 1000
                self.match(CypherParser.ENDS)
                self.state = 1001
                self.match(CypherParser.SP)
                self.state = 1002
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1003
                self.match(CypherParser.SP)
                self.state = 1004
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1007
                self.match(CypherParser.SP)


            self.state = 1010
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = CypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(CypherParser.SP)
            self.state = 1013
            self.match(CypherParser.IN)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1014
                self.match(CypherParser.SP)


            self.state = 1017
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = CypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(CypherParser.SP)
                self.state = 1020
                self.match(CypherParser.IS)
                self.state = 1021
                self.match(CypherParser.SP)
                self.state = 1022
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(CypherParser.SP)
                self.state = 1024
                self.match(CypherParser.IS)
                self.state = 1025
                self.match(CypherParser.SP)
                self.state = 1026
                self.match(CypherParser.NOT)
                self.state = 1027
                self.match(CypherParser.SP)
                self.state = 1028
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1048
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1032
                            self.match(CypherParser.SP)


                        self.state = 1035
                        self.match(CypherParser.T__17)
                        self.state = 1037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1036
                            self.match(CypherParser.SP)


                        self.state = 1039
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1040
                            self.match(CypherParser.SP)


                        self.state = 1043
                        self.match(CypherParser.T__18)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1044
                            self.match(CypherParser.SP)


                        self.state = 1047
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.oC_PowerOfExpression()
            self.state = 1080
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1054
                            self.match(CypherParser.SP)


                        self.state = 1057
                        self.match(CypherParser.T__4)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1058
                            self.match(CypherParser.SP)


                        self.state = 1061
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1062
                            self.match(CypherParser.SP)


                        self.state = 1065
                        self.match(CypherParser.T__19)
                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1066
                            self.match(CypherParser.SP)


                        self.state = 1069
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1070
                            self.match(CypherParser.SP)


                        self.state = 1073
                        self.match(CypherParser.T__20)
                        self.state = 1075
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1074
                            self.match(CypherParser.SP)


                        self.state = 1077
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1084
                        self.match(CypherParser.SP)


                    self.state = 1087
                    self.match(CypherParser.T__21)
                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1088
                        self.match(CypherParser.SP)


                    self.state = 1091
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NonArithmeticOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_NonArithmeticOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 24, 26, 47, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 105, 106, 107, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.oC_NonArithmeticOperatorExpression()
                pass
            elif token in [18, 19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                _la = self._input.LA(1)
                if not(_la==18 or _la==19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1099
                    self.match(CypherParser.SP)


                self.state = 1102
                self.oC_NonArithmeticOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NonArithmeticOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NonArithmeticOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NonArithmeticOperatorExpression" ):
                listener.enterOC_NonArithmeticOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NonArithmeticOperatorExpression" ):
                listener.exitOC_NonArithmeticOperatorExpression(self)




    def oC_NonArithmeticOperatorExpression(self):

        localctx = CypherParser.OC_NonArithmeticOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_NonArithmeticOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.oC_Atom()
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1114
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                    if la_ == 1:
                        self.state = 1107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1106
                            self.match(CypherParser.SP)


                        self.state = 1109
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1111
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1110
                            self.match(CypherParser.SP)


                        self.state = 1113
                        self.oC_PropertyLookup()
                        pass

             
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1119
                    self.match(CypherParser.SP)


                self.state = 1122
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.match(CypherParser.T__7)
                self.state = 1126
                self.oC_Expression()
                self.state = 1127
                self.match(CypherParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(CypherParser.T__7)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737573028160) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343051394343361) != 0):
                    self.state = 1130
                    self.oC_Expression()


                self.state = 1133
                self.match(CypherParser.T__11)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737573028160) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343051394343361) != 0):
                    self.state = 1134
                    self.oC_Expression()


                self.state = 1137
                self.match(CypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(CypherParser.T__22)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1141
                self.match(CypherParser.SP)


            self.state = 1144
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(CypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1148
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1149
                self.match(CypherParser.COUNT)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1150
                    self.match(CypherParser.SP)


                self.state = 1153
                self.match(CypherParser.T__5)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1154
                    self.match(CypherParser.SP)


                self.state = 1157
                self.match(CypherParser.T__4)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1158
                    self.match(CypherParser.SP)


                self.state = 1161
                self.match(CypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1163
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1164
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1165
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1166
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1167
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1168
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1169
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1172
                self.match(CypherParser.CASE)
                self.state = 1177 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1174
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1173
                            self.match(CypherParser.SP)


                        self.state = 1176
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1179 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1181
                self.match(CypherParser.CASE)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1182
                    self.match(CypherParser.SP)


                self.state = 1185
                self.oC_Expression()
                self.state = 1190 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1186
                            self.match(CypherParser.SP)


                        self.state = 1189
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1192 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

                pass


            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1196
                    self.match(CypherParser.SP)


                self.state = 1199
                self.match(CypherParser.ELSE)
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1200
                    self.match(CypherParser.SP)


                self.state = 1203
                self.oC_Expression()


            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1206
                self.match(CypherParser.SP)


            self.state = 1209
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = CypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(CypherParser.WHEN)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1212
                self.match(CypherParser.SP)


            self.state = 1215
            self.oC_Expression()
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1216
                self.match(CypherParser.SP)


            self.state = 1219
            self.match(CypherParser.THEN)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1220
                self.match(CypherParser.SP)


            self.state = 1223
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(CypherParser.T__7)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1226
                self.match(CypherParser.SP)


            self.state = 1229
            self.oC_FilterExpression()
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1230
                    self.match(CypherParser.SP)


                self.state = 1233
                self.match(CypherParser.T__10)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1234
                    self.match(CypherParser.SP)


                self.state = 1237
                self.oC_Expression()


            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1240
                self.match(CypherParser.SP)


            self.state = 1243
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(CypherParser.T__7)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1246
                self.match(CypherParser.SP)


            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059625921) != 0):
                self.state = 1249
                self.oC_Variable()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1250
                    self.match(CypherParser.SP)


                self.state = 1253
                self.match(CypherParser.T__2)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1254
                    self.match(CypherParser.SP)




            self.state = 1259
            self.oC_RelationshipsPattern()
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1260
                self.match(CypherParser.SP)


            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1263
                self.oC_Where()
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1264
                    self.match(CypherParser.SP)




            self.state = 1269
            self.match(CypherParser.T__10)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1270
                self.match(CypherParser.SP)


            self.state = 1273
            self.oC_Expression()
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1274
                self.match(CypherParser.SP)


            self.state = 1277
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = CypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.match(CypherParser.ALL)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1280
                    self.match(CypherParser.SP)


                self.state = 1283
                self.match(CypherParser.T__5)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1284
                    self.match(CypherParser.SP)


                self.state = 1287
                self.oC_FilterExpression()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1288
                    self.match(CypherParser.SP)


                self.state = 1291
                self.match(CypherParser.T__6)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.match(CypherParser.ANY)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1294
                    self.match(CypherParser.SP)


                self.state = 1297
                self.match(CypherParser.T__5)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1298
                    self.match(CypherParser.SP)


                self.state = 1301
                self.oC_FilterExpression()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1302
                    self.match(CypherParser.SP)


                self.state = 1305
                self.match(CypherParser.T__6)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.match(CypherParser.NONE)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1308
                    self.match(CypherParser.SP)


                self.state = 1311
                self.match(CypherParser.T__5)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1312
                    self.match(CypherParser.SP)


                self.state = 1315
                self.oC_FilterExpression()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1316
                    self.match(CypherParser.SP)


                self.state = 1319
                self.match(CypherParser.T__6)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1321
                self.match(CypherParser.SINGLE)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1322
                    self.match(CypherParser.SP)


                self.state = 1325
                self.match(CypherParser.T__5)
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1326
                    self.match(CypherParser.SP)


                self.state = 1329
                self.oC_FilterExpression()
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1330
                    self.match(CypherParser.SP)


                self.state = 1333
                self.match(CypherParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.oC_IdInColl()
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1338
                    self.match(CypherParser.SP)


                self.state = 1341
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = CypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(CypherParser.T__5)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1347
                self.match(CypherParser.SP)


            self.state = 1350
            self.oC_Expression()
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1351
                self.match(CypherParser.SP)


            self.state = 1354
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.oC_Variable()
            self.state = 1357
            self.match(CypherParser.SP)
            self.state = 1358
            self.match(CypherParser.IN)
            self.state = 1359
            self.match(CypherParser.SP)
            self.state = 1360
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.oC_FunctionName()
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1363
                self.match(CypherParser.SP)


            self.state = 1366
            self.match(CypherParser.T__5)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1367
                self.match(CypherParser.SP)


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1370
                self.match(CypherParser.DISTINCT)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1371
                    self.match(CypherParser.SP)




            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737573028160) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343051394343361) != 0):
                self.state = 1376
                self.oC_Expression()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1377
                    self.match(CypherParser.SP)


                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1380
                    self.match(CypherParser.T__1)
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1381
                        self.match(CypherParser.SP)


                    self.state = 1384
                    self.oC_Expression()
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1385
                        self.match(CypherParser.SP)


                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1395
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.oC_Namespace()
            self.state = 1398
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = CypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(CypherParser.EXISTS)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1401
                self.match(CypherParser.SP)


            self.state = 1404
            self.match(CypherParser.T__23)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1405
                self.match(CypherParser.SP)


            self.state = 1416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62]:
                self.state = 1408
                self.oC_RegularQuery()
                pass
            elif token in [6, 83, 89, 90, 91, 98, 119, 120, 121, 124]:
                self.state = 1409
                self.oC_Pattern()
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1410
                        self.match(CypherParser.SP)


                    self.state = 1413
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1418
                self.match(CypherParser.SP)


            self.state = 1421
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.oC_ProcedureName()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1424
                self.match(CypherParser.SP)


            self.state = 1427
            self.match(CypherParser.T__5)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1428
                self.match(CypherParser.SP)


            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737573028160) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343051394343361) != 0):
                self.state = 1431
                self.oC_Expression()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1432
                    self.match(CypherParser.SP)


                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1435
                    self.match(CypherParser.T__1)
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1436
                        self.match(CypherParser.SP)


                    self.state = 1439
                    self.oC_Expression()
                    self.state = 1441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1440
                        self.match(CypherParser.SP)


                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1450
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.oC_Namespace()
            self.state = 1457
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1459
                    self.oC_SymbolicName()
                    self.state = 1460
                    self.match(CypherParser.T__22) 
                self.state = 1466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Literal)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.oC_BooleanLiteral()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(CypherParser.NULL)
                pass
            elif token in [95, 96, 97, 105, 106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1471
                self.oC_NumberLiteral()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1472
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1473
                self.oC_ListLiteral()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            _la = self._input.LA(1)
            if not(_la==93 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1479
                self.oC_DoubleLiteral()
                pass
            elif token in [95, 96, 97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            _la = self._input.LA(1)
            if not(_la==105 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(CypherParser.T__7)
            self.state = 1489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1488
                self.match(CypherParser.SP)


            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737573028160) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343051394343361) != 0):
                self.state = 1491
                self.oC_Expression()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1492
                    self.match(CypherParser.SP)


                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1495
                    self.match(CypherParser.T__1)
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1496
                        self.match(CypherParser.SP)


                    self.state = 1499
                    self.oC_Expression()
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1500
                        self.match(CypherParser.SP)


                    self.state = 1507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1510
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(CypherParser.T__23)
            self.state = 1514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1513
                self.match(CypherParser.SP)


            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1729452625654448128) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1441116715713822719) != 0):
                self.state = 1516
                self.oC_PropertyKeyName()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1517
                    self.match(CypherParser.SP)


                self.state = 1520
                self.match(CypherParser.T__9)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1521
                    self.match(CypherParser.SP)


                self.state = 1524
                self.oC_Expression()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1525
                    self.match(CypherParser.SP)


                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1528
                    self.match(CypherParser.T__1)
                    self.state = 1530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1529
                        self.match(CypherParser.SP)


                    self.state = 1532
                    self.oC_PropertyKeyName()
                    self.state = 1534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1533
                        self.match(CypherParser.SP)


                    self.state = 1536
                    self.match(CypherParser.T__9)
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1537
                        self.match(CypherParser.SP)


                    self.state = 1540
                    self.oC_Expression()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1541
                        self.match(CypherParser.SP)


                    self.state = 1548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1551
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(CypherParser.T__25)
            self.state = 1558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 89, 90, 91, 98, 119, 120, 121, 124]:
                self.state = 1556
                self.oC_SymbolicName()
                pass
            elif token in [96]:
                self.state = 1557
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_SchemaName)
        try:
            self.state = 1562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 89, 90, 91, 98, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.oC_SymbolicName()
                pass
            elif token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 92, 93, 94, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1729452625654448128) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 35993614558953471) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013282304) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212287488) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384963584) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





