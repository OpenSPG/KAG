#------------kag-solver configuration start----------------#
pipeline_name: think_pipeline

kg_cs:
  type: kg_cs_open_spg
  path_select:
    type: exact_one_hop_select

kg_fr:
  type: kg_fr_open_spg
  path_select:
    type: fuzzy_one_hop_select
    llm_client: "{chat_llm}"

rc:
  type: rc_open_spg
  ppr_chunk_retriever_tool:
    type: ppr_chunk_retriever
    llm_client: "{ner_llm}"
  reranker:
    type: rerank_by_vector

kag_hybrid_executor: &kag_hybrid_executor_conf
  type: kag_hybrid_executor
  lf_rewriter:
    type: kag_spo_lf
    llm_client: "{chat_llm}"
    lf_trans_prompt:
      type: default_spo_retriever_decompose
    vectorize_model: "{vectorize_model}"
  flow: |
    kg_cs->kg_fr->rc

kag_output_executor: &kag_output_executor_conf
  type: kag_output_executor

kag_deduce_executor: &kag_deduce_executor_conf
  type: kag_deduce_executor


py_code_based_math_executor: &py_code_based_math_executor_conf
  type: py_code_based_math_executor
  llm: "{chat_llm}"

kag_solver_pipeline:
  type: kag_static_pipeline
  planner:
    type: kag_static_planner
    llm: "{chat_llm}"
    plan_prompt:
      type: default_lf_static_planning
    rewrite_prompt:
      type: default_query_rewrite
  executors:
    - *kag_hybrid_executor_conf
    - *py_code_based_math_executor_conf
    - *kag_deduce_executor_conf
    - *kag_output_executor_conf
  generator:
    type: llm_generator
    llm_client: "{chat_llm}"
    generated_prompt:
      type: default_refer_generator_prompt

#------------kag-solver configuration end----------------#
