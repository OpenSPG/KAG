# coding: utf-8
# Copyright 2023 OpenSPG Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.


"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.common.rest.configuration import Configuration


class ReasonTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "task_id": "str",
        "project_id": "int",
        "graph_store_url": "str",
        "dsl": "str",
        "params": "object",
        "status": "str",
        "result_table_result": "TableResult",
        "result_nodes": "list[str]",
        "result_edges": "list[str]",
    }

    attribute_map = {
        "task_id": "taskId",
        "project_id": "projectId",
        "graph_store_url": "graphStoreUrl",
        "dsl": "dsl",
        "params": "params",
        "status": "status",
        "result_table_result": "resultTableResult",
        "result_nodes": "resultNodes",
        "result_edges": "resultEdges",
    }

    def __init__(
        self,
        task_id=None,
        project_id=None,
        graph_store_url=None,
        dsl=None,
        params=None,
        status=None,
        result_table_result=None,
        result_nodes=None,
        result_edges=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ReasonTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._project_id = None
        self._graph_store_url = None
        self._dsl = None
        self._params = None
        self._status = None
        self._result_table_result = None
        self._result_nodes = None
        self._result_edges = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        self.project_id = project_id
        if graph_store_url is not None:
            self.graph_store_url = graph_store_url
        self.dsl = dsl
        if params is not None:
            self.params = params
        if status is not None:
            self.status = status
        if result_table_result is not None:
            self.result_table_result = result_table_result
        if result_nodes is not None:
            self.result_nodes = result_nodes
        if result_edges is not None:
            self.result_edges = result_edges

    @property
    def task_id(self):
        """Gets the task_id of this ReasonTask.  # noqa: E501


        :return: The task_id of this ReasonTask.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ReasonTask.


        :param task_id: The task_id of this ReasonTask.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def project_id(self):
        """Gets the project_id of this ReasonTask.  # noqa: E501


        :return: The project_id of this ReasonTask.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ReasonTask.


        :param project_id: The project_id of this ReasonTask.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and project_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `project_id`, must not be `None`"
            )  # noqa: E501

        self._project_id = project_id

    @property
    def graph_store_url(self):
        """Gets the graph_store_url of this ReasonTask.  # noqa: E501


        :return: The graph_store_url of this ReasonTask.  # noqa: E501
        :rtype: str
        """
        return self._graph_store_url

    @graph_store_url.setter
    def graph_store_url(self, graph_store_url):
        """Sets the graph_store_url of this ReasonTask.


        :param graph_store_url: The graph_store_url of this ReasonTask.  # noqa: E501
        :type: str
        """

        self._graph_store_url = graph_store_url

    @property
    def dsl(self):
        """Gets the dsl of this ReasonTask.  # noqa: E501


        :return: The dsl of this ReasonTask.  # noqa: E501
        :rtype: str
        """
        return self._dsl

    @dsl.setter
    def dsl(self, dsl):
        """Sets the dsl of this ReasonTask.


        :param dsl: The dsl of this ReasonTask.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and dsl is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `dsl`, must not be `None`"
            )  # noqa: E501

        self._dsl = dsl

    @property
    def params(self):
        """Gets the params of this ReasonTask.  # noqa: E501


        :return: The params of this ReasonTask.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ReasonTask.


        :param params: The params of this ReasonTask.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def status(self):
        """Gets the status of this ReasonTask.  # noqa: E501


        :return: The status of this ReasonTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReasonTask.


        :param status: The status of this ReasonTask.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def result_table_result(self):
        """Gets the result_table_result of this ReasonTask.  # noqa: E501


        :return: The result_table_result of this ReasonTask.  # noqa: E501
        :rtype: TableResult
        """
        return self._result_table_result

    @result_table_result.setter
    def result_table_result(self, result_table_result):
        """Sets the result_table_result of this ReasonTask.


        :param result_table_result: The result_table_result of this ReasonTask.  # noqa: E501
        :type: TableResult
        """

        self._result_table_result = result_table_result

    @property
    def result_nodes(self):
        """Gets the result_nodes of this ReasonTask.  # noqa: E501


        :return: The result_nodes of this ReasonTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_nodes

    @result_nodes.setter
    def result_nodes(self, result_nodes):
        """Sets the result_nodes of this ReasonTask.


        :param result_nodes: The result_nodes of this ReasonTask.  # noqa: E501
        :type: list[str]
        """

        self._result_nodes = result_nodes

    @property
    def result_edges(self):
        """Gets the result_edges of this ReasonTask.  # noqa: E501


        :return: The result_edges of this ReasonTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_edges

    @result_edges.setter
    def result_edges(self, result_edges):
        """Sets the result_edges of this ReasonTask.


        :param result_edges: The result_edges of this ReasonTask.  # noqa: E501
        :type: list[str]
        """

        self._result_edges = result_edges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReasonTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReasonTask):
            return True

        return self.to_dict() != other.to_dict()
