# coding: utf-8

"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.common.rest.configuration import Configuration


class DataEdge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        '_from': 'str',
        'from_type': 'str',
        'to': 'str',
        'to_type': 'str',
        'label': 'str',
        'properties': 'object'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'from_type': 'fromType',
        'to': 'to',
        'to_type': 'toType',
        'label': 'label',
        'properties': 'properties'
    }

    def __init__(self, id=None, _from=None, from_type=None, to=None, to_type=None, label=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """DataEdge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self.__from = None
        self._from_type = None
        self._to = None
        self._to_type = None
        self._label = None
        self._properties = None
        self.discriminator = None

        self.id = id
        self._from = _from
        self.from_type = from_type
        self.to = to
        self.to_type = to_type
        self.label = label
        self.properties = properties

    @property
    def id(self):
        """Gets the id of this DataEdge.  # noqa: E501


        :return: The id of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataEdge.


        :param id: The id of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this DataEdge.  # noqa: E501


        :return: The _from of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this DataEdge.


        :param _from: The _from of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and _from is None:  # noqa: E501
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def from_type(self):
        """Gets the from_type of this DataEdge.  # noqa: E501


        :return: The from_type of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self._from_type

    @from_type.setter
    def from_type(self, from_type):
        """Sets the from_type of this DataEdge.


        :param from_type: The from_type of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and from_type is None:  # noqa: E501
            raise ValueError("Invalid value for `from_type`, must not be `None`")  # noqa: E501

        self._from_type = from_type

    @property
    def to(self):
        """Gets the to of this DataEdge.  # noqa: E501


        :return: The to of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this DataEdge.


        :param to: The to of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def to_type(self):
        """Gets the to_type of this DataEdge.  # noqa: E501


        :return: The to_type of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self._to_type

    @to_type.setter
    def to_type(self, to_type):
        """Sets the to_type of this DataEdge.


        :param to_type: The to_type of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to_type is None:  # noqa: E501
            raise ValueError("Invalid value for `to_type`, must not be `None`")  # noqa: E501

        self._to_type = to_type

    @property
    def label(self):
        """Gets the label of this DataEdge.  # noqa: E501


        :return: The label of this DataEdge.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DataEdge.


        :param label: The label of this DataEdge.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def properties(self):
        """Gets the properties of this DataEdge.  # noqa: E501


        :return: The properties of this DataEdge.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DataEdge.


        :param properties: The properties of this DataEdge.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataEdge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataEdge):
            return True

        return self.to_dict() != other.to_dict()
