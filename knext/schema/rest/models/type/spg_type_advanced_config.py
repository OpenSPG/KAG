# coding: utf-8
# Copyright 2023 OpenSPG Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.


"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.common.rest.configuration import Configuration


class SpgTypeAdvancedConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "link_operator": "OperatorKey",
        "fuse_operator": "OperatorKey",
        "extract_operator": "OperatorKey",
        "normalized_operator": "OperatorKey",
    }

    attribute_map = {
        "link_operator": "linkOperator",
        "fuse_operator": "fuseOperator",
        "extract_operator": "extractOperator",
        "normalized_operator": "normalizedOperator",
    }

    def __init__(
        self,
        link_operator=None,
        fuse_operator=None,
        extract_operator=None,
        normalized_operator=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SpgTypeAdvancedConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._link_operator = None
        self._fuse_operator = None
        self._extract_operator = None
        self._normalized_operator = None
        self.discriminator = None

        if link_operator is not None:
            self.link_operator = link_operator
        if fuse_operator is not None:
            self.fuse_operator = fuse_operator
        if extract_operator is not None:
            self.extract_operator = extract_operator
        if normalized_operator is not None:
            self.normalized_operator = normalized_operator

    @property
    def link_operator(self):
        """Gets the link_operator of this SpgTypeAdvancedConfig.  # noqa: E501


        :return: The link_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :rtype: OperatorKey
        """
        return self._link_operator

    @link_operator.setter
    def link_operator(self, link_operator):
        """Sets the link_operator of this SpgTypeAdvancedConfig.


        :param link_operator: The link_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :type: OperatorKey
        """

        self._link_operator = link_operator

    @property
    def fuse_operator(self):
        """Gets the fuse_operator of this SpgTypeAdvancedConfig.  # noqa: E501


        :return: The fuse_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :rtype: OperatorKey
        """
        return self._fuse_operator

    @fuse_operator.setter
    def fuse_operator(self, fuse_operator):
        """Sets the fuse_operator of this SpgTypeAdvancedConfig.


        :param fuse_operator: The fuse_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :type: OperatorKey
        """

        self._fuse_operator = fuse_operator

    @property
    def extract_operator(self):
        """Gets the extract_operator of this SpgTypeAdvancedConfig.  # noqa: E501


        :return: The extract_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :rtype: OperatorKey
        """
        return self._extract_operator

    @extract_operator.setter
    def extract_operator(self, extract_operator):
        """Sets the extract_operator of this SpgTypeAdvancedConfig.


        :param extract_operator: The extract_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :type: OperatorKey
        """

        self._extract_operator = extract_operator

    @property
    def normalized_operator(self):
        """Gets the normalized_operator of this SpgTypeAdvancedConfig.  # noqa: E501


        :return: The normalized_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :rtype: OperatorKey
        """
        return self._normalized_operator

    @normalized_operator.setter
    def normalized_operator(self, normalized_operator):
        """Sets the normalized_operator of this SpgTypeAdvancedConfig.


        :param normalized_operator: The normalized_operator of this SpgTypeAdvancedConfig.  # noqa: E501
        :type: OperatorKey
        """

        self._normalized_operator = normalized_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpgTypeAdvancedConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpgTypeAdvancedConfig):
            return True

        return self.to_dict() != other.to_dict()
