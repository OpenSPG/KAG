# coding: utf-8
# Copyright 2023 OpenSPG Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.


"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.common.rest.configuration import Configuration


class SortRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'property_name': 'str',
        'hop_index': 'int',
        'sort_by_vertex_property': 'bool',
        'strategy': 'str'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'hop_index': 'hopIndex',
        'sort_by_vertex_property': 'sortByVertexProperty',
        'strategy': 'strategy'
    }

    def __init__(self, property_name=None, hop_index=None, sort_by_vertex_property=None, strategy=None, local_vars_configuration=None):  # noqa: E501
        """SortRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._property_name = None
        self._hop_index = None
        self._sort_by_vertex_property = None
        self._strategy = None
        self.discriminator = None

        self.property_name = property_name
        if hop_index is not None:
            self.hop_index = hop_index
        self.sort_by_vertex_property = sort_by_vertex_property
        if strategy is not None:
            self.strategy = strategy

    @property
    def property_name(self):
        """Gets the property_name of this SortRule.  # noqa: E501


        :return: The property_name of this SortRule.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this SortRule.


        :param property_name: The property_name of this SortRule.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and property_name is None:  # noqa: E501
            raise ValueError("Invalid value for `property_name`, must not be `None`")  # noqa: E501

        self._property_name = property_name

    @property
    def hop_index(self):
        """Gets the hop_index of this SortRule.  # noqa: E501


        :return: The hop_index of this SortRule.  # noqa: E501
        :rtype: int
        """
        return self._hop_index

    @hop_index.setter
    def hop_index(self, hop_index):
        """Sets the hop_index of this SortRule.


        :param hop_index: The hop_index of this SortRule.  # noqa: E501
        :type: int
        """

        self._hop_index = hop_index

    @property
    def sort_by_vertex_property(self):
        """Gets the sort_by_vertex_property of this SortRule.  # noqa: E501


        :return: The sort_by_vertex_property of this SortRule.  # noqa: E501
        :rtype: bool
        """
        return self._sort_by_vertex_property

    @sort_by_vertex_property.setter
    def sort_by_vertex_property(self, sort_by_vertex_property):
        """Sets the sort_by_vertex_property of this SortRule.


        :param sort_by_vertex_property: The sort_by_vertex_property of this SortRule.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and sort_by_vertex_property is None:  # noqa: E501
            raise ValueError("Invalid value for `sort_by_vertex_property`, must not be `None`")  # noqa: E501

        self._sort_by_vertex_property = sort_by_vertex_property

    @property
    def strategy(self):
        """Gets the strategy of this SortRule.  # noqa: E501


        :return: The strategy of this SortRule.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this SortRule.


        :param strategy: The strategy of this SortRule.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SortRule):
            return True

        return self.to_dict() != other.to_dict()
