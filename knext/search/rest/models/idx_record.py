# coding: utf-8
# Copyright 2023 OpenSPG Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.


"""
    knext

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from knext.common.rest.configuration import Configuration


class IdxRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "idx_name": "str",
        "doc_id": "str",
        "score": "float",
        "fields": "object",
    }

    attribute_map = {
        "idx_name": "idxName",
        "doc_id": "docId",
        "score": "score",
        "fields": "fields",
    }

    def __init__(
        self,
        idx_name=None,
        doc_id=None,
        score=None,
        fields=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """IdxRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._idx_name = None
        self._doc_id = None
        self._score = None
        self._fields = None
        self.discriminator = None

        self.idx_name = idx_name
        self.doc_id = doc_id
        self.score = score
        if fields is not None:
            self.fields = fields

    @property
    def idx_name(self):
        """Gets the idx_name of this IdxRecord.  # noqa: E501


        :return: The idx_name of this IdxRecord.  # noqa: E501
        :rtype: str
        """
        return self._idx_name

    @idx_name.setter
    def idx_name(self, idx_name):
        """Sets the idx_name of this IdxRecord.


        :param idx_name: The idx_name of this IdxRecord.  # noqa: E501
        :type: str
        """
        self._idx_name = idx_name

    @property
    def doc_id(self):
        """Gets the doc_id of this IdxRecord.  # noqa: E501


        :return: The doc_id of this IdxRecord.  # noqa: E501
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this IdxRecord.


        :param doc_id: The doc_id of this IdxRecord.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and doc_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `doc_id`, must not be `None`"
            )  # noqa: E501

        self._doc_id = doc_id

    @property
    def score(self):
        """Gets the score of this IdxRecord.  # noqa: E501


        :return: The score of this IdxRecord.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this IdxRecord.


        :param score: The score of this IdxRecord.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation and score is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `score`, must not be `None`"
            )  # noqa: E501

        self._score = score

    @property
    def fields(self):
        """Gets the fields of this IdxRecord.  # noqa: E501


        :return: The fields of this IdxRecord.  # noqa: E501
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this IdxRecord.


        :param fields: The fields of this IdxRecord.  # noqa: E501
        :type: object
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdxRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdxRecord):
            return True

        return self.to_dict() != other.to_dict()
